var Partykals = (function (THREE) {
  'use strict';

  function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

  var THREE__default = /*#__PURE__*/_interopDefaultLegacy(THREE);

  function _typeof(obj) {
    "@babel/helpers - typeof";

    if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
      _typeof = function (obj) {
        return typeof obj;
      };
    } else {
      _typeof = function (obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
    }

    return _typeof(obj);
  }

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _inherits(subClass, superClass) {
    if (typeof superClass !== "function" && superClass !== null) {
      throw new TypeError("Super expression must either be null or a function");
    }

    subClass.prototype = Object.create(superClass && superClass.prototype, {
      constructor: {
        value: subClass,
        writable: true,
        configurable: true
      }
    });
    if (superClass) _setPrototypeOf(subClass, superClass);
  }

  function _getPrototypeOf(o) {
    _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
      return o.__proto__ || Object.getPrototypeOf(o);
    };
    return _getPrototypeOf(o);
  }

  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };

    return _setPrototypeOf(o, p);
  }

  function _isNativeReflectConstruct() {
    if (typeof Reflect === "undefined" || !Reflect.construct) return false;
    if (Reflect.construct.sham) return false;
    if (typeof Proxy === "function") return true;

    try {
      Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));
      return true;
    } catch (e) {
      return false;
    }
  }

  function _construct(Parent, args, Class) {
    if (_isNativeReflectConstruct()) {
      _construct = Reflect.construct;
    } else {
      _construct = function _construct(Parent, args, Class) {
        var a = [null];
        a.push.apply(a, args);
        var Constructor = Function.bind.apply(Parent, a);
        var instance = new Constructor();
        if (Class) _setPrototypeOf(instance, Class.prototype);
        return instance;
      };
    }

    return _construct.apply(null, arguments);
  }

  function _assertThisInitialized(self) {
    if (self === void 0) {
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    }

    return self;
  }

  function _possibleConstructorReturn(self, call) {
    if (call && (typeof call === "object" || typeof call === "function")) {
      return call;
    }

    return _assertThisInitialized(self);
  }

  function _createSuper(Derived) {
    var hasNativeReflectConstruct = _isNativeReflectConstruct();

    return function _createSuperInternal() {
      var Super = _getPrototypeOf(Derived),
          result;

      if (hasNativeReflectConstruct) {
        var NewTarget = _getPrototypeOf(this).constructor;

        result = Reflect.construct(Super, arguments, NewTarget);
      } else {
        result = Super.apply(this, arguments);
      }

      return _possibleConstructorReturn(this, result);
    };
  }

  function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
  }

  function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray(arr);
  }

  function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter);
  }

  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
  }

  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;

    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

    return arr2;
  }

  function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }

  var utils={/**
     * Returns a random number between min (inclusive) and max (exclusive)
     */getRandomBetween:function getRandomBetween(min,max){return Math.random()*(max-min)+min;},/**
     * Get random between baseVal and baseVal + extraRandom.
     * If 'extraRandom' is not defined, will just return baseVal.
     * If baseVal is not defined, will return white.
     */getRandomWithSpread:function getRandomWithSpread(baseVal,extraRandom){if(!extraRandom){return baseVal;}return this.getRandomBetween(baseVal,baseVal+extraRandom);},/**
     * Get random between two colors.
     * If 'colMax' is not defined, will just return colMin or white color if not defined.
     */getRandomColorBetween:function getRandomColorBetween(colMin,colMax,target){target=target||new THREE__default['default'].Color();if(!colMax){return colMin?target.copy(colMin):target.setRGB(0,0,0);}return target.setRGB(this.getRandomBetween(colMin.r,colMax.r),this.getRandomBetween(colMin.g,colMax.g),this.getRandomBetween(colMin.b,colMax.b));},/**
     * Get random between two vectors.
     * If 'vecMax' is not defined, will just return vecMin or zero point if not defined.
     */getRandomVectorBetween:function getRandomVectorBetween(vecMin,vecMax,target){target=null;target=target||new THREE__default['default'].Vector3();if(!vecMax){return vecMin?target.copy(vecMin):target.set(0,0,0);}return target.set(this.getRandomBetween(vecMin.x,vecMax.x),this.getRandomBetween(vecMin.y,vecMax.y),this.getRandomBetween(vecMin.z,vecMax.z));},/**
     * Lerp between two colors, returning a new color without changing any of them.
     */lerpColors:function lerpColors(colA,colB,alpha,target){target=target||new THREE__default['default'].Color();return target.copy(colA).lerp(colB,alpha);},/**
     * Lerp between two numbers.
     */lerp:function lerp(x,y,alpha){return x*(1-alpha)+y*alpha;},/**
     * Get const numeric value or generate random value from randomizer.
     */randomizerOrValue:function randomizerOrValue(val){return (val.generate?val.generate():val)||0;}};

  var TMP1=new THREE__default['default'].Vector3(0,0,0);var TMP2=new THREE__default['default'].Vector3(0,0,0);var TMP_COLOR=new THREE__default['default'].Color(1,1,1);/**
   * A single particle metadata in the particles system.
   * We attach this to the particle's vertices when in system's geometry.
   */var Particle=/*#__PURE__*/function(){/**
     * Create the particle.
     * @param {ParticlesSystem} system The particles system this particle belongs to.
     */function Particle(system){_classCallCheck(this,Particle);this.system=system;/*  this.velocity = null;
      this.acceleration = null; // optional
      this.position = null;
      this.startColor = null;
      this.endColor = null;
      this.gravityX = 0;
      this.gravityY = 0;
      this.gravityZ = 0;
      this.age = 0;
      this.finished = false;
      this.ttl = null;
      this.alpha = null;
      this.startAlpha = null;
      this.endAlpha = null;
      this.startAlphaChangeAt = null;
      this.startColorChangeAt = null;
      this.startSizeChangeAt = null;
      this.startWorldPosition = null;
      this.onUpdate = null;*/this.reset();}/**
     * Reset the particle.
     */_createClass(Particle,[{key:"reset",value:function reset(){var options=this.system.options.particles;// reset particle age and if alive
  this.age=0;this.finished=false;// store gravity force
  this.gravityX=options.gravityX;this.gravityY=options.gravityY||options.gravity;this.gravityZ=options.gravityZ;// particle's velocity and velocity bonus
  this.velocity=getConstOrRandomVector(this.velocity,options.velocity);if(options.velocityBonus){this.velocity.add(options.velocityBonus);}// particle's acceleration.
  this.acceleration=getConstOrRandomVector(this.acceleration,options.acceleration,true);// starting offset
  this.position=getConstOrRandomVector(this.position,options.offset);// if there is a bound object, we take its position as start
  // if (this.system.boundObject) {
  //   this.position = this.position.add(this.system.boundObject.position);
  // }
  // set particle's ttl
  this.ttl=utils.getRandomWithSpread(options.ttl||1,options.ttlExtra)||1;// set per-particle alpha
  this.alpha=this.startAlpha=this.endAlpha=null;this.startAlphaChangeAt=(options.startAlphaChangeAt||0)/this.ttl;if(options.fade){// const alpha throughout particle's life?
  if(options.alpha!==undefined){this.alpha=utils.randomizerOrValue(options.alpha);}// shifting alpha?
  else {this.startAlpha=utils.randomizerOrValue(options.startAlpha);this.endAlpha=utils.randomizerOrValue(options.endAlpha);}}// set per-particle coloring
  this.colorize=Boolean(options.colorize);this.color=this.startColor=this.endColor=null;this.startColorChangeAt=(options.startColorChangeAt||0)/this.ttl;if(this.colorize){// const color throughout particle's life?
  if(options.color){this.color=getConstOrRandomColor(this.color,options.color);}// shifting color?
  else {this.startColor=getConstOrRandomColor(this.startColor,options.startColor);this.endColor=getConstOrRandomColor(this.endColor,options.endColor);}}// set per-particle size
  this.size=this.startSize=this.endSize=null;this.startSizeChangeAt=(options.startSizeChangeAt||0)/this.ttl;if(options.scaling){// const size throughout particle's life?
  if(options.size!==undefined){this.size=utils.randomizerOrValue(options.size);}// shifting size?
  else {this.startSize=utils.randomizerOrValue(options.startSize);this.endSize=utils.randomizerOrValue(options.endSize);}}// set per-particle rotation
  this.rotation=this.rotationSpeed=null;if(options.rotating){this.rotation=utils.randomizerOrValue(options.rotation||0);this.rotationSpeed=utils.randomizerOrValue(options.rotationSpeed||0);}// used to keep constant world position
  this.startWorldPosition=null;// store on-update callback, if defined
  this.onUpdate=options.onUpdate;// call custom spawn method
  if(options.onSpawn){options.onSpawn(this);}}/**
     * Update the particle (call this every frame).
     * @param {*} index Particle index in system.
     * @param {*} deltaTime Update delta time.
     */},{key:"update",value:function update(index,deltaTime){// if finished, skip
  if(this.finished){return;}// is it first update call?
  var firstUpdate=this.age===0;// do first-update stuff
  if(firstUpdate){// if its first update and use world position, store current world position
  if(this.system.options.particles.worldPosition){this.startWorldPosition=this.system.getWorldPosition();}// set constant alpha
  if(this.alpha!==null||this.startAlpha!==null){this.system.setAlpha(index,this.alpha||this.startAlpha);}// set constant color
  if(this.color!==null||this.startColor!==null){this.system.setColor(index,this.color||this.startColor);}// set constant size
  if(this.size!==null||this.startSize!==null){this.system.setSize(index,this.size||this.startSize);}// set start rotation
  if(this.rotation!==null){this.system.setRotation(index,this.rotation);}}// do normal updates
  else {// set animated color
  if(this.startColor&&this.age>=this.startColorChangeAt){this.system.setColor(index,utils.lerpColors(this.startColor,this.endColor,this.startColorChangeAt?(this.age-this.startColorChangeAt)/(1-this.startColorChangeAt):this.age,TMP_COLOR));}// set animated alpha
  if(this.startAlpha!=null&&this.age>=this.startAlphaChangeAt){this.system.setAlpha(index,utils.lerp(this.startAlpha,this.endAlpha,this.startAlphaChangeAt?(this.age-this.startAlphaChangeAt)/(1-this.startAlphaChangeAt):this.age));}// set animated size
  if(this.startSize!=null&&this.age>=this.startSizeChangeAt){this.system.setSize(index,utils.lerp(this.startSize,this.endSize,this.startSizeChangeAt?(this.age-this.startSizeChangeAt)/(1-this.startSizeChangeAt):this.age));}}// set animated rotation
  if(this.rotationSpeed){this.rotation+=this.rotationSpeed*deltaTime;this.system.setRotation(index,this.rotation);}// update position
  if(this.velocity){// add gravity force
  if(this.gravityX)this.velocity.x+=this.gravityX*deltaTime;if(this.gravityY)this.velocity.y+=this.gravityY*deltaTime;if(this.gravityZ)this.velocity.z+=this.gravityZ*deltaTime;this.position.x+=this.velocity.x*deltaTime;this.position.y+=this.velocity.y*deltaTime;this.position.z+=this.velocity.z*deltaTime;}var positionToSet=TMP1.set(this.position.x,this.position.y,this.position.z);// to maintain world position
  if(this.startWorldPosition){var systemPos=this.system.getWorldPosition(TMP2);// returns TMP2
  systemPos.sub(this.startWorldPosition);positionToSet=positionToSet.sub(systemPos);}// set position in system
  // be aware, that positionToSet is a temp-vector at this point,
  // so do not store it anywhere
  this.system.setPosition(index,positionToSet);// update velocity
  if(this.acceleration&&this.velocity){this.velocity.x+=this.acceleration.x*deltaTime;this.velocity.y+=this.acceleration.y*deltaTime;this.velocity.z+=this.acceleration.z*deltaTime;}// update age. note: use ttl as factor, so that age is always between 0 and 1
  this.age+=deltaTime/this.ttl;// call custom methods
  if(this.onUpdate){this.onUpdate(this);}// is done? set as finished and continue to set final state
  if(this.age>1){this.age=1;this.finished=true;}}/**
     * Get particle's world position.
     */},{key:"worldPosition",get:function get(){return this.system.getWorldPosition().add(this.position);}}]);return Particle;}();/**
   * Return either the value of a randomizer, a const value, or a default empty or null.
   */function getConstOrRandomVector(target,constValOrRandomizer,returnNullIfUndefined){target=target||new THREE__default['default'].Vector3();if(!constValOrRandomizer)return returnNullIfUndefined?null:target.set(0,0,0);if(constValOrRandomizer.generate)return constValOrRandomizer.generate(target);return target.copy(constValOrRandomizer);}/**
   * Return either the value of a randomizer, a const value, or a default empty or null.
   */function getConstOrRandomColor(target,constValOrRandomizer,returnNullIfUndefined){target=target||new THREE__default['default'].Color();if(!constValOrRandomizer)return returnNullIfUndefined?null:target.setRGB(1,1,1);if(constValOrRandomizer.generate)return constValOrRandomizer.generate(target);return target.copy(constValOrRandomizer);}var particle=Particle;

  /**
   * Implement vertex shader for our particles.
   * Author: Ronen Ness.
   * Since: 2019.
   */var code$1="\n// attributes we get from geometry\nattribute float alpha;\n\n// per-particle size\n#ifdef CONST_SIZE\n    uniform float constSize;\n#else\n    attribute float size;\n#endif\n\n// per-particle rotation\n#ifdef ROTATION\n    attribute float rotation;\n#endif\n\n// system scale when using perspective mode\n#ifdef PERSPECTIVE\n    uniform float rendererScale;\n#endif\n\n// output params for fragment shader\nvarying float vAlpha;\n\n// set per-particle color\n#ifdef COLORING\n    varying vec3 vColor;\n#endif\n\n// get per-particle rotation\n#ifdef ROTATION\n    varying float vRotation;\n#endif\n\n// vertex shader main\nvoid main() \n{\n    // alpha and color\n    vAlpha = alpha;\n\n    // set color\n    #ifdef COLORING\n        vColor = color;\n    #endif\n\n    // set const size\n    #ifdef CONST_SIZE\n        float size = constSize;\n    #endif\n\n    // set position\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n    gl_Position = projectionMatrix * mvPosition;\n\n    // apply rotation\n    #ifdef ROTATION\n        vRotation = rotation;\n    #endif\n    \n    // set size - either perspective or constant\n    #ifdef PERSPECTIVE\n        gl_PointSize = size * (rendererScale / length(mvPosition.xyz));\n    #else\n        gl_PointSize = size;\n    #endif\n}\n";var vertex=code$1;

  /**
   * Implement fragment shader for our particles.
   * Author: Ronen Ness.
   * Since: 2019.
   */var code="\n// material uniforms\nuniform vec3 globalColor;\n\n// params we get from vertex shader\nvarying float vAlpha;\n\n// per-particle color from vertex shader\n#ifdef COLORING\n    varying vec3 vColor;\n#endif\n\n// per-particle rotation from vertex shader\n#ifdef ROTATION\n    varying float vRotation;\n#endif\n\n// diffuse texture\n#ifdef TEXTURE\n    uniform sampler2D _texture;\n#endif\n\n// fragment shader main\nvoid main() \n{\n    // set default color if don't have per-particle colors\n    #ifndef COLORING\n        vec3 vColor = vec3(1,1,1);\n    #endif\n\n    // texture\n    #ifdef TEXTURE\n\n        // use rotation (rotate texture)\n        #ifdef ROTATION\n            float mid = 0.5;\n            vec2 rotated = vec2(cos(vRotation) * (gl_PointCoord.x - mid) + sin(vRotation) * (gl_PointCoord.y - mid) + mid,\n                          cos(vRotation) * (gl_PointCoord.y - mid) - sin(vRotation) * (gl_PointCoord.x - mid) + mid);\n            vec4 textureCol = texture2D(_texture,  rotated);\n        // no rotation\n        #else\n            vec2 coords = vec2((gl_PointCoord.x - 0.5) + 0.5, (gl_PointCoord.y - 0.5) + 0.5);\n            vec4 textureCol = texture2D(_texture, coords);\n        #endif\n\n        // get color with texture\n        gl_FragColor = vec4( globalColor * vColor, vAlpha ) * textureCol;\n        \n    // no texture (colors only)\n    #else\n        gl_FragColor = vec4( globalColor * vColor, vAlpha );\n    #endif\n\n    // check if need to discard pixel\n    #ifdef ALPHA_TEST\n        if (gl_FragColor.a < 0.00001) { discard; }\n    #endif\n}\n";var fragment=code;

  /**
   * Material for particles.
   */var ParticlesMaterial=/*#__PURE__*/function(){/**
       * Create the particles material.
       * @param {*} options Material options.
       * @param {Number} options.color Material general color.
       * @param {Boolean} options.transparent Should we support transparency?
       * @param {THREE.Blending} options.blending Blending mode.
       * @param {THREE.Texture} options.map Texture to use.
       * @param {Boolean} options.perspective If true, will scale particles based on distance from camera.
       * @param {Boolean} options.perParticleColor If true, will allow per-particle colors.
       * @param {Boolean} options.perParticleRotation If true, will allow per-particle rotation.
       * @param {Number} options.constSize If exist, will set const size to all particles.
       * @param {Boolean} options.alphaTest If true, will perform alpha test and discard transparent pixels.
       * @param {Boolean} options.depthWrite If true, will perform depth write.
       * @param {Boolean} options.depthTest If true, will perform depth test.
       */function ParticlesMaterial(options){_classCallCheck(this,ParticlesMaterial);// store options
  this.options=options;// uniforms
  var uniforms={globalColor:{value:new THREE__default['default'].Color(options.color||0xffffff)},rendererScale:{value:1}};// set flags to change shaders behavior
  var flags="";if(options.perspective){flags+="#define PERSPECTIVE\n";}if(options.map){flags+="#define TEXTURE\n";uniforms._texture={value:options.map};}if(options.perParticleColor){flags+="#define COLORING\n";}if(options.perParticleRotation){flags+="#define ROTATION\n";}if(options.constSize){flags+="#define CONST_SIZE\n";uniforms.constSize={value:options.constSize};}if(options.alphaTest){flags+="#define ALPHA_TEST\n";}flags+="\n";// create the internal material
  var shaderMaterial=new THREE__default['default'].ShaderMaterial({uniforms:uniforms,vertexShader:flags+vertex,fragmentShader:flags+fragment,transparent:Boolean(options.transparent),blending:options.blending,vertexColors:THREE__default['default'].VertexColors,depthWrite:Boolean(options.depthWrite),depthTest:Boolean(options.depthTest)});this.material=shaderMaterial;}/**
       * Dispose the material.
       */_createClass(ParticlesMaterial,[{key:"dispose",value:function dispose(){this.material.dispose();}/**
       * Set unified scale for all particles.
       */},{key:"setBaseScale",value:function setBaseScale(val){if(this.options.perspective){this.material.uniforms.rendererScale.value=val;}}}]);return ParticlesMaterial;}();var material=ParticlesMaterial;

  /**
   * Define interface for a helper class to generate random vectors and colors.
   * Author: Ronen Ness.
   * Since: 2019.
   */ /**
   * Base class for all vector randomizers.
   */var Randomizer=/*#__PURE__*/function(){function Randomizer(){_classCallCheck(this,Randomizer);}_createClass(Randomizer,[{key:"generate",value:/**
     * Generate and return a random value.
     * This is the main method to implement.
     */function generate(){throw new Error("Not implemented.");}}]);return Randomizer;}();// export the base class
  var randomizer=Randomizer;

  /**
   * Box vector randomizer.
   */var BoxRandomizer=/*#__PURE__*/function(_Randomizer){_inherits(BoxRandomizer,_Randomizer);var _super=_createSuper(BoxRandomizer);/**
     * Create the box randomizer from min and max vectors to randomize between.
     */function BoxRandomizer(min,max){var _this;_classCallCheck(this,BoxRandomizer);_this=_super.call(this);_this.min=min||new THREE__default['default'].Vector3(-1,-1,-1);_this.max=max||new THREE__default['default'].Vector3(1,1,1);return _this;}/**
     * Generate a random vector.
     */_createClass(BoxRandomizer,[{key:"generate",value:function generate(target){return utils.getRandomVectorBetween(this.min,this.max,target);}}]);return BoxRandomizer;}(randomizer);// export the randomizer class
  var box_randomizer=BoxRandomizer;

  var MIN_VEC=new THREE__default['default'].Vector3(-1,-1,-1);var MAX_VEC=new THREE__default['default'].Vector3(1,1,1);// random between -1 and 1.
  function randMinusToOne(){return Math.random()*2-1;}/**
   * Sphere vector randomizer.
   */var SphereRandomizer=/*#__PURE__*/function(_Randomizer){_inherits(SphereRandomizer,_Randomizer);var _super=_createSuper(SphereRandomizer);/**
     * Create the sphere randomizer from radius and optional scaler.
     */function SphereRandomizer(maxRadius,minRadius,scaler,minVector,maxVector){var _this;_classCallCheck(this,SphereRandomizer);_this=_super.call(this);_this.maxRadius=maxRadius||1;_this.minRadius=minRadius||0;_this.scaler=scaler;_this.minVector=minVector;_this.maxVector=maxVector;return _this;}/**
     * Generate a random vector.
     */_createClass(SphereRandomizer,[{key:"generate",value:function generate(target){target=target||new THREE__default['default'].Vector3();// create random vector
  target.set(randMinusToOne(),randMinusToOne(),randMinusToOne());// clamp values
  if(this.minVector||this.maxVector){target.clamp(this.minVector||MIN_VEC,this.maxVector||MAX_VEC);}// normalize and multiply by radius
  target.normalize().multiplyScalar(utils.getRandomBetween(this.minRadius,this.maxRadius));// apply scaler
  if(this.scaler){target.multiply(this.scaler);}return target;}}]);return SphereRandomizer;}(randomizer);// export the randomizer class
  var sphere_randomizer=SphereRandomizer;

  /**
   * Box vector randomizer.
   */var ColorsRandomizer=/*#__PURE__*/function(_Randomizer){_inherits(ColorsRandomizer,_Randomizer);var _super=_createSuper(ColorsRandomizer);/**
     * Create the box randomizer from min and max colors to randomize between.
     */function ColorsRandomizer(min,max){var _this;_classCallCheck(this,ColorsRandomizer);_this=_super.call(this);_this.min=min||new THREE__default['default'].Color(0,0,0);_this.max=max||new THREE__default['default'].Color(1,1,1);return _this;}/**
     * Generate a random color.
     */_createClass(ColorsRandomizer,[{key:"generate",value:function generate(target){return utils.getRandomColorBetween(this.min,this.max,target);}}]);return ColorsRandomizer;}(randomizer);// export the randomizer class
  var colors_randomizer=ColorsRandomizer;

  /**
   * Min-Max number randomizer.
   */var MinMaxRandomizer=/*#__PURE__*/function(_Randomizer){_inherits(MinMaxRandomizer,_Randomizer);var _super=_createSuper(MinMaxRandomizer);/**
     * Create the min-max randomizer from min and max.
     */function MinMaxRandomizer(min,max){var _this;_classCallCheck(this,MinMaxRandomizer);_this=_super.call(this);_this.min=min;_this.max=max;return _this;}/**
     * Generate a random number.
     */_createClass(MinMaxRandomizer,[{key:"generate",value:function generate(){return utils.getRandomBetween(this.min,this.max);}}]);return MinMaxRandomizer;}(randomizer);// export the randomizer class
  var minmax_randomizer=MinMaxRandomizer;

  var randomizers={Randomizer:randomizer,BoxRandomizer:box_randomizer,SphereRandomizer:sphere_randomizer,ColorsRandomizer:colors_randomizer,MinMaxRandomizer:minmax_randomizer};

  var randomizerOrValue=utils.randomizerOrValue;/**
   * Emitter class to determine rate of particles generation.
   */var Emitter=/*#__PURE__*/function(){/**
       * Create the emitter class.
       * @param {*} options Emitter options.
       * @param {*} options.onSpawnBurst Burst of particles when particle system starts; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random numbers.
       * @param {*} options.onInterval Burst of particles every interval; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random numbers.
       * @param {Number} options.interval Spawn interval time, in seconds; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random numbers.
       * @param {Number} options.detoretingMinTtl If provided and particle system's ttl is below this value, will start emitting less and less until stopping completely.
       */function Emitter(options){_classCallCheck(this,Emitter);this.options=options;options.interval=options.interval||1;this.age=0;this.timeToSpawn=Math.random()*randomizerOrValue(options.interval);}/**
       * Update emitter and return how many particles should be generated this frame.
       */_createClass(Emitter,[{key:"update",value:function update(deltaTime,system){// particles to generate
  var ret=0;// first update? do burst
  if(this.age===0&&this.options.onSpawnBurst){ret+=randomizerOrValue(this.options.onSpawnBurst);}// update age
  this.age+=deltaTime;// no interval emitting? skip
  if(!this.options.onInterval){return ret;}// check if inverval expired
  this.timeToSpawn-=deltaTime;if(this.timeToSpawn<=0){this.timeToSpawn=randomizerOrValue(this.options.interval);ret+=randomizerOrValue(this.options.onInterval);}// do detoration
  if(this.options.detoretingMinTtl&&system.ttl<this.options.detoretingMinTtl){var detorateFactor=system.ttl/this.options.detoretingMinTtl;ret*=detorateFactor;}// return number of particles to generate
  return ret;}}]);return Emitter;}();// export the emitter class
  var emitter=Emitter;

  var NULL_ARRAY=[];var BLENDING_OPTIONS={opaque:THREE__default['default'].NoBlending,additive:THREE__default['default'].AdditiveBlending,multiply:THREE__default['default'].MultiplyBlending,blend:THREE__default['default'].NormalBlending};// to check if value is defined
  function defined(val){return val!==undefined&&val!==null;}/**
   * deep-copies the settings,
   * and replaces the objects that have a "moduleType"
   * value with the appropriate class from partykals.
   *
   * a object, that can be replaced must look like
   * { moduleType:"e.g. ColorsRandomizer", values:[optional parameters]}
   *
   * @param {Object} object
   * @returns the copied object
   */function copyFromJSON(object,resources){if(!object)return object;// can either be 0, undefined, null, "" -> we do not care anyways
  if(_typeof(object)!=="object"){return object;}if(Array.isArray(object)){var result=[];for(var i=0;i<object.length;i++){result.push(copyFromJSON(object[i],resources));}return result;}// if object, create a new object and
  // copy all sub values
  if(!object.moduleType){var _result={};for(var key in object){_result[key]=copyFromJSON(object[key],resources);}return _result;}if(object.moduleType==="texture"){return resources[object.params[0]];}// if we need to convert to object
  var C=THREE__default['default'][object.moduleType]||randomizers[object.moduleType];return _construct(C,_toConsumableArray(object.params||NULL_ARRAY));}/**
   * Particles system.
   */var ParticlesSystem=/*#__PURE__*/function(){/**
     * Create particles system.
     * @param {*} options Particles options.
     * @param {THREE.Object3D} options.container Container to add particles system to.
     *
     * // PARTICLES OPTIONS
     * ============================================================================
     * @param {*} options.particles Particle-related options.
     *
     * // PARTICLES TTL
     * @param {Number} options.particles.ttl How long, in seconds, every particle lives.
     * @param {Number} options.particles.ttlExtra If provided, will add random numbers from 0 to ttlExtra to particle's ttl.
     *
     * // PARTICLES FADING / ALPHA
     * @param {Boolean} options.particles.alpha Per-particle constant alpha; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {Number} options.particles.startAlpha Particles starting opacity; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {Number} options.particles.endAlpha Particles ending opacity; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {Number} options.particles.startAlphaChangeAt Will only start shifting alpha when age is over this value; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     *
     * // PARTICLES GROWING / SIZE
     * @param {Number} options.particles.size Per-particle constant size; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {Number} options.particles.startSize Particles starting size; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {Number} options.particles.endSize Particles ending size; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {Number} options.particles.startSizeChangeAt Will only start shifting size when age is over this value; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     *
     * // PARTICLES COLORING
     * @param {THREE.Color} options.particles.color Per-particle constant color; either a constant value (THREE.Color) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {THREE.Color} options.particles.startColor Starting color min value; either a constant value (THREE.Color) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {THREE.Color} options.particles.endColor Ending color min value; either a constant value (THREE.Color) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {Number} options.particles.startColorChangeAt Will only start shifting color when age is over this value; either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     *
     * // PARTICLES ACCELERATION
     * @param {THREE.Vector3} options.particles.acceleration Particles acceleration; either a constant value (THREE.Vector3) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {Number} options.particles.gravity Gravity force affecting the particles.
     *
     * // PARTICLES ROTATION
     * @param {Number} options.particles.rotation Per-particle rotation (only works with texture); either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {Number} options.particles.rotationSpeed Particles rotation speed (only works with texture); either a constant value (Number) or a Partykals.Randomizers.Randomizer instance to create random values.
     *
     * // PARTICLES VELOCITY
     * @param {*} options.particles.velocity Particles starting velocity; either a constant value (THREE.Vector3) or a Partykals.Randomizers.Randomizer instance to create random values.
     * @param {THREE.Vector3} options.particles.velocityBonus Velocity value to add to all particles after randomizing velocity.
     *
     * // PARTICLES OFFSET
     * @param {THREE.Vector3} options.particles.offset Particles offset from system's center; either a constant value (THREE.Vector3) or a Partykals.Randomizers.Randomizer instance to create random values.
     *
     * // PARTICLE GLOBALS
     * @param {Boolean} options.particles.worldPosition If true, particles will maintain their world position after spawn even if the system moves.
     * @param {Number} options.particles.globalSize Const size for all particles. Note: this is more efficient than setting per-particle size property.
     * @param {Number} options.particles.globalColor Global color to affect all particles. Note: this is more efficient than setting per-particle color property.
     * @param {String} options.particles.blending Particles blending mode (opaque / blend / additive).
     * @param {THREE.Texture} options.particles.texture Particle's texture to use.
     *
     * // CUSTOM CALLBACKS
     * @param {Function} options.particles.onUpdate Optional method to call per-particle every update frame.
     * @param {Function} options.particles.onSpawn Optional method to call per-particle every time a particle spawns (after everything is set).
     *
     * // SYSTEM OPTIONS
     * ============================================================================
     * @param {*} options.system System-related options.
     * @param {Number} options.system.particlesCount Particles count.
     * @param {Number} options.system.ttl How long, in seconds, the particle system lives.
     * @param {Number} options.system.speed Speed factor to affect all particles and emitting. Note: the only thing this don't affect is system's ttl.
     * @param {Function} options.system.onUpdate Optional method to call every update frame.
     * @param {Partykals.Emitter} options.system.emitters A single emitter or a list of emitters to attach to this system.
     * @param {Boolean} options.system.perspective If true, will scale particles based on distance from camera.
     * @param {Number} options.system.scale Overall system scale when in perspective mode (if perspective=false, will be ignored). A good value is between 400 and 600.
     * @param {Boolean} options.system.depthWrite Should we perform depth write? (default to true).
     * @param {Boolean} options.system.depthTest Should we perform depth test? (default to true).
     */function ParticlesSystem(options){_classCallCheck(this,ParticlesSystem);// use bindObject, to set these values
  // then particle system follows the passed object
  this.boundObject=null;this.lockBoundRotation=true;// store options
  options.particles=options.particles||{worldPosition:true};options.system=options.system||{};this.options=options;// get particle options
  var pOptions=options.particles;// do some internal cheating to replace const size with global size
  if(typeof options.particles.size==="number"){console.warn("Note: replaced 'size' with 'globalSize' property since its more efficient and provided size value was constant anyway.");options.particles.globalSize=options.particles.size;delete options.particles.size;}// do some internal cheating to replace const color with global color
  if(options.particles.color instanceof THREE__default['default'].Color){console.warn("Note: replaced 'color' with 'globalColor' property since its more efficient and you provided color value was constant anyway.");options.particles.globalColor=options.particles.color;delete options.particles.color;}// set some internal flags
  options.particles.fade=defined(pOptions.startAlpha)||defined(pOptions.alpha);options.particles.rotating=defined(pOptions.rotationSpeed)||defined(pOptions.rotation);options.particles.colorize=defined(pOptions.color)||defined(pOptions.startColor);options.particles.scaling=defined(pOptions.size)||defined(pOptions.startSize);// validate alpha params
  if(defined(pOptions.startAlpha)&&!defined(pOptions.endAlpha)){throw new Error("When providing 'startAlpha' you must also provide 'endAlpha'!");}if(defined(pOptions.startAlpha)&&defined(pOptions.alpha)){throw new Error("When providing 'alpha' you can't also provide 'startAlpha'!");}// validate color params
  if(defined(pOptions.startColor)&&!defined(pOptions.endColor)){throw new Error("When providing 'startColor' you must also provide 'endColor'!");}if(defined(pOptions.startColor)&&defined(pOptions.color)){throw new Error("When providing 'color' you can't also provide 'startColor'!");}// validate size params
  if(defined(pOptions.startSize)&&!defined(pOptions.endSize)){throw new Error("When providing 'startSize' you must also provide 'endSize'!");}if(defined(pOptions.startSize)&&defined(pOptions.size)){throw new Error("When providing 'size' you can't also provide 'startSize'!");}// get particles count
  var particleCount=options.system.particlesCount||10;// get blending mode
  var blending=options.particles.blending||"opaque";// get threejs blending mode
  var threeBlend=BLENDING_OPTIONS[blending];// set emitters
  this._emitters=[];if(options.system.emitters){if(options.system.emitters instanceof Array){for(var i=0;i<options.system.emitters.length;++i){this.addEmitter(options.system.emitters[i]);}}else {this.addEmitter(options.system.emitters);}}// has transparency?
  var isTransparent=blending!=="opaque";// create the particle geometry
  this.particlesGeometry=new THREE__default['default'].BufferGeometry();// set perspective mode
  var perspective=options.system.perspective!==undefined?Boolean(options.system.perspective):true;// create particles material
  var pMaterial=new material({size:options.particles.size||10,color:options.particles.globalColor||0xffffff,blending:threeBlend,perspective:perspective,transparent:isTransparent,map:options.particles.texture,perParticleColor:Boolean(options.particles.colorize),alphaTest:blending==="blend"&&defined(options.particles.texture),constSize:defined(options.particles.globalSize)?options.particles.globalSize:null,depthWrite:defined(options.system.depthWrite)?options.system.depthWrite:true,depthTest:defined(options.system.depthTest)?options.system.depthTest:true,perParticleRotation:options.particles.rotating});// store material for later usage
  this.material=pMaterial;// store speed factor
  this.speed=options.system.speed||1;// set system starting ttl and other params
  this.reset();// dead particles and alive particles lists
  this._aliveParticles=[];this._deadParticles=[];// create all particles + set geometry attributes
  var vertices=new Float32Array(particleCount*3);var colors=options.particles.colorize?new Float32Array(particleCount*3):null;var alphas=options.particles.fade?new Float32Array(particleCount*1):null;var sizes=options.particles.scaling?new Float32Array(particleCount*1):null;var rotations=options.particles.rotating?new Float32Array(particleCount*1):null;for(var p=0;p<particleCount;p++){var index=p*3;vertices[index]=vertices[index+1]=vertices[index+2]=0;if(colors)colors[index]=colors[index+1]=colors[index+2]=1;if(alphas)alphas[p]=1;if(sizes)sizes[p]=1;if(rotations)rotations[p]=0;this._deadParticles.push(new particle(this));}this.particlesGeometry.setAttribute("position",new THREE__default['default'].BufferAttribute(vertices,3));if(alphas){this.particlesGeometry.setAttribute("alpha",new THREE__default['default'].BufferAttribute(alphas,1));}if(colors){this.particlesGeometry.setAttribute("color",new THREE__default['default'].BufferAttribute(colors,3));}if(sizes){this.particlesGeometry.setAttribute("size",new THREE__default['default'].BufferAttribute(sizes,1));}if(rotations){this.particlesGeometry.setAttribute("rotation",new THREE__default['default'].BufferAttribute(rotations,1));}this.particlesGeometry.setDrawRange(0,0);// set scale
  this.material.setBaseScale(options.system.scale||400);// create the particles system
  var particleSystem=new THREE__default['default'].Points(this.particlesGeometry,this.material.material);particleSystem.sortParticles=isTransparent;// set default render order
  if(ParticlesSystem.defaultRenderOrder!==undefined){particleSystem.renderOrder=ParticlesSystem.defaultRenderOrder;}// store particles system
  this.particleSystem=particleSystem;// to make sure first update will update everything
  this._positionDirty=true;this._colorsDirty=Boolean(colors);this._alphaDirty=Boolean(alphas);this._rotateDirty=Boolean(rotations);// add it to the parent container
  if(options.container){this.addTo(options.container);}}/**
     * creates an instance from a json definition
     *
     * @static
     * @param {*} options
     * @return {ParticlesSystem} new ParticlesSystem created from the json-object
     * @memberof ParticlesSystem
     */_createClass(ParticlesSystem,[{key:"addEmitter",value:/**
     * Add emitter to this particles system.
     */function addEmitter(emitter){this._emitters.push(emitter);}/**
     * Dispose the entire system.
     */},{key:"dispose",value:function dispose(){this.particlesGeometry.dispose();this.material.dispose();}/**
     * Return true when ttl is expired and there are no more alive particles in system.
     */},{key:"finished",get:function get(){return this.ttlExpired&&this.particlesCount===0;}/**
     * Get if this system's ttl is expired.
     */},{key:"ttlExpired",get:function get(){return this.ttl!==undefined&&this.ttl<=0;}/**
     * Reset particles system ttl.
     */},{key:"reset",value:function reset(){this.ttl=this.options.system.ttl;this.age=0;this._timeToUpdateBS=0;}/**
     * Get system's world position.
     */},{key:"getWorldPosition",value:function getWorldPosition(ret){ret=ret||new THREE__default['default'].Vector3();this.particleSystem.getWorldPosition(ret);return ret;}/**
     * Add the particles system to scene or container.
     * @param {THREE.Object3D} container Container to add system to.
     */},{key:"addTo",value:function addTo(container){container.add(this.particleSystem);}/**
     * Set a particle's color value.
     */},{key:"setColor",value:function setColor(index,color){index*=3;var colors=this.particlesGeometry.attributes.color.array;colors[index]=color.r;colors[index+1]=color.g;colors[index+2]=color.b;this._colorsDirty=true;}/**
     * Set a particle's position.
     */},{key:"setPosition",value:function setPosition(index,position){index*=3;var vertices=this.particlesGeometry.attributes.position.array;vertices[index]=position.x;vertices[index+1]=position.y;vertices[index+2]=position.z;this._positionDirty=true;}/**
     * Set particle's alpha.
     */},{key:"setAlpha",value:function setAlpha(index,value){this.particlesGeometry.attributes.alpha.array[index]=value;this._alphaDirty=true;}/**
     * Set particle's rotation.
     */},{key:"setRotation",value:function setRotation(index,value){this.particlesGeometry.attributes.rotation.array[index]=value;this._rotateDirty=true;}/**
     * Set particle's size.
     */},{key:"setSize",value:function setSize(index,value){this.particlesGeometry.attributes.size.array[index]=value;this._sizeDirty=true;}/**
     * Get how many particles this system currently shows.
     */},{key:"particlesCount",get:function get(){return this._aliveParticles.length;}/**
     * Get max particles count.
     */},{key:"maxParticlesCount",get:function get(){return this._aliveParticles.length+this._deadParticles.length;}/**
     * If ttl is expired and there are no more alive particles, remove system and dispose it.
     * @returns True if removed & disposed, false if still alive.
     */},{key:"removeAndDisposeIfFinished",value:function removeAndDisposeIfFinished(){if(this.finished){this.removeSelf();this.dispose();return true;}return false;}},{key:"bindObject",value:function bindObject(object,lockBoundRotation){this.boundObject=object;this.lockBoundRotation=defined(lockBoundRotation)?lockBoundRotation:true;}/**
     * Update particles system.
     */},{key:"update",value:function update(deltaTime){// if deltaTime is undefined, set automatically
  if(deltaTime===undefined){var timeNow=new Date().getTime()/1000.0;deltaTime=timeNow-this._lastTime||0;this._lastTime=timeNow;}// delta time is 0? skip
  if(deltaTime===0){return;}// update ttl
  if(this.ttl!==undefined&&this.ttl>0){this.ttl-=deltaTime;}// apply speed
  deltaTime*=this.speed;// store last delta time
  this.dt=deltaTime;this.age+=deltaTime;// if we shall follow an object,
  // we just update the position on each frame,
  // to be the same, as the object
  if(this.boundObject){var pos=this.boundObject.position;this.particleSystem.position.set(pos.x,pos.y,pos.z);if(!this.lockBoundRotation){var rot=this.boundObject.rotation;this.particleSystem.rotation.set(rot.x,rot.y,rot.z);}}// to check if number of particles changed
  var prevParticlesCount=this._aliveParticles.length;// generate particles (unless ttl expired)
  if(!this.ttlExpired){for(var i=0;i<this._emitters.length;++i){var toSpawn=this._emitters[i].update(deltaTime,this);if(toSpawn){this.spawnParticles(toSpawn);}}}// update particles
  for(var _i=this._aliveParticles.length-1;_i>=0;--_i){// update particle
  var particle=this._aliveParticles[_i];particle.update(_i,deltaTime);// finished? remove it
  if(particle.finished){this._aliveParticles.splice(_i,1);this._deadParticles.push(particle);}}// hide invisible vertices
  if(prevParticlesCount!==this._aliveParticles.length){this.particlesGeometry.setDrawRange(0,this._aliveParticles.length);}// set vertices dirty flag
  this.particlesGeometry.attributes.position.needsUpdate=this._positionDirty;this._needBoundingSphereUpdate=this._needBoundingSphereUpdate||this._positionDirty;this._positionDirty=false;// set colors dirty flag
  if(this._colorsDirty){this.particlesGeometry.attributes.color.needsUpdate=true;this._colorsDirty=false;}// set alphas dirty flag
  if(this._alphaDirty){this.particlesGeometry.attributes.alpha.needsUpdate=true;this._alphaDirty=false;}// set size dirty flag
  if(this._sizeDirty){this.particlesGeometry.attributes.size.needsUpdate=true;this._sizeDirty=false;}// set rotation dirty flag
  if(this._rotateDirty){this.particlesGeometry.attributes.rotation.needsUpdate=true;this._rotateDirty=false;}// update bounding sphere
  if(this._needBoundingSphereUpdate){this._timeToUpdateBS-=deltaTime;if(this._timeToUpdateBS<=0){this._timeToUpdateBS=0.2;this.particlesGeometry.computeBoundingSphere();}}// if finished, stop here
  if(this.finished){// TODO: remove options finish
  if(this.options.system.onFinish)this.options.system.onFinish(this);if(this.onFinish)this.onFinish(this);return;}// call optional update
  // TODO: remove options onUpdate
  if(this.options.system.onUpdate){this.options.system.onUpdate(this);}if(this.onUpdate)this.onUpdate(this);}/**
     * Spawn particles.
     * @param {Number} quantity Number of particles to spawn. If exceed max available particles in system, skip.
     */},{key:"spawnParticles",value:function spawnParticles(quantity){// spawn particles
  for(var i=0;i<quantity;++i){// no available dead particles? skip
  if(this._deadParticles.length===0){return;}// spawn particle
  var particle=this._deadParticles.pop();particle.reset();this._aliveParticles.push(particle);}}/**
     * Remove particles system from its parent.
     */},{key:"removeSelf",value:function removeSelf(){if(this.particleSystem.parent){this.particleSystem.parent.remove(this.particleSystem);}}}],[{key:"fromJSON",value:function fromJSON(options){var resources=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};var result=copyFromJSON(options,resources);if(Array.isArray(result.system.emitters)){result.system.emitters=result.system.emitters.map(function(v){return new emitter(v);});}else {result.system.emitters=new emitter(result.system.emitters);}return new ParticlesSystem(result);}}]);return ParticlesSystem;}();// override this to set default rendering order to all particle systems
  ParticlesSystem.defaultRenderOrder=undefined;// export the particles system
  var particles_system=ParticlesSystem;

  var partykals={ParticlesSystem:particles_system,Particle:particle,Emitter:emitter,Utils:utils,Randomizers:randomizers};

  return partykals;

}(THREE));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFydHlrYWxzLmpzIiwic291cmNlcyI6WyIuLi9wYXJ0eWthbHMvdXRpbHMuanMiLCIuLi9wYXJ0eWthbHMvcGFydGljbGUuanMiLCIuLi9wYXJ0eWthbHMvbWF0ZXJpYWwvc2hhZGVycy92ZXJ0ZXguanMiLCIuLi9wYXJ0eWthbHMvbWF0ZXJpYWwvc2hhZGVycy9mcmFnbWVudC5qcyIsIi4uL3BhcnR5a2Fscy9tYXRlcmlhbC9tYXRlcmlhbC5qcyIsIi4uL3BhcnR5a2Fscy9yYW5kb21pemVycy9yYW5kb21pemVyLmpzIiwiLi4vcGFydHlrYWxzL3JhbmRvbWl6ZXJzL2JveF9yYW5kb21pemVyLmpzIiwiLi4vcGFydHlrYWxzL3JhbmRvbWl6ZXJzL3NwaGVyZV9yYW5kb21pemVyLmpzIiwiLi4vcGFydHlrYWxzL3JhbmRvbWl6ZXJzL2NvbG9yc19yYW5kb21pemVyLmpzIiwiLi4vcGFydHlrYWxzL3JhbmRvbWl6ZXJzL21pbm1heF9yYW5kb21pemVyLmpzIiwiLi4vcGFydHlrYWxzL3JhbmRvbWl6ZXJzL2luZGV4LmpzIiwiLi4vcGFydHlrYWxzL2VtaXR0ZXIuanMiLCIuLi9wYXJ0eWthbHMvcGFydGljbGVzX3N5c3RlbS5qcyIsIi4uL3BhcnR5a2Fscy9pbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEltcGxlbWVudCBhIHNpbmdsZSBwYXJ0aWNsZSBpbiB0aGUgcGFydGljbGVzIHN5c3RlbS5cbiAqIEF1dGhvcjogUm9uZW4gTmVzcy5cbiAqIFNpbmNlOiAyMDE5LlxuICovXG5jb25zdCBUSFJFRSA9IHJlcXVpcmUoXCJ0aHJlZVwiKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgcmFuZG9tIG51bWJlciBiZXR3ZWVuIG1pbiAoaW5jbHVzaXZlKSBhbmQgbWF4IChleGNsdXNpdmUpXG4gICAqL1xuICBnZXRSYW5kb21CZXR3ZWVuOiBmdW5jdGlvbiAobWluLCBtYXgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4pICsgbWluO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgcmFuZG9tIGJldHdlZW4gYmFzZVZhbCBhbmQgYmFzZVZhbCArIGV4dHJhUmFuZG9tLlxuICAgKiBJZiAnZXh0cmFSYW5kb20nIGlzIG5vdCBkZWZpbmVkLCB3aWxsIGp1c3QgcmV0dXJuIGJhc2VWYWwuXG4gICAqIElmIGJhc2VWYWwgaXMgbm90IGRlZmluZWQsIHdpbGwgcmV0dXJuIHdoaXRlLlxuICAgKi9cbiAgZ2V0UmFuZG9tV2l0aFNwcmVhZDogZnVuY3Rpb24gKGJhc2VWYWwsIGV4dHJhUmFuZG9tKSB7XG4gICAgaWYgKCFleHRyYVJhbmRvbSkge1xuICAgICAgcmV0dXJuIGJhc2VWYWw7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmdldFJhbmRvbUJldHdlZW4oYmFzZVZhbCwgYmFzZVZhbCArIGV4dHJhUmFuZG9tKTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHJhbmRvbSBiZXR3ZWVuIHR3byBjb2xvcnMuXG4gICAqIElmICdjb2xNYXgnIGlzIG5vdCBkZWZpbmVkLCB3aWxsIGp1c3QgcmV0dXJuIGNvbE1pbiBvciB3aGl0ZSBjb2xvciBpZiBub3QgZGVmaW5lZC5cbiAgICovXG4gIGdldFJhbmRvbUNvbG9yQmV0d2VlbjogZnVuY3Rpb24gKGNvbE1pbiwgY29sTWF4LCB0YXJnZXQpIHtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFRIUkVFLkNvbG9yKCk7XG4gICAgaWYgKCFjb2xNYXgpIHtcbiAgICAgIHJldHVybiBjb2xNaW4gPyB0YXJnZXQuY29weShjb2xNaW4pIDogdGFyZ2V0LnNldFJHQigwLCAwLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldC5zZXRSR0IoXG4gICAgICB0aGlzLmdldFJhbmRvbUJldHdlZW4oY29sTWluLnIsIGNvbE1heC5yKSxcbiAgICAgIHRoaXMuZ2V0UmFuZG9tQmV0d2Vlbihjb2xNaW4uZywgY29sTWF4LmcpLFxuICAgICAgdGhpcy5nZXRSYW5kb21CZXR3ZWVuKGNvbE1pbi5iLCBjb2xNYXguYilcbiAgICApO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgcmFuZG9tIGJldHdlZW4gdHdvIHZlY3RvcnMuXG4gICAqIElmICd2ZWNNYXgnIGlzIG5vdCBkZWZpbmVkLCB3aWxsIGp1c3QgcmV0dXJuIHZlY01pbiBvciB6ZXJvIHBvaW50IGlmIG5vdCBkZWZpbmVkLlxuICAgKi9cbiAgZ2V0UmFuZG9tVmVjdG9yQmV0d2VlbjogZnVuY3Rpb24gKHZlY01pbiwgdmVjTWF4LCB0YXJnZXQpIHtcbiAgICB0YXJnZXQgPSBudWxsO1xuICAgIHRhcmdldCA9IHRhcmdldCB8fCBuZXcgVEhSRUUuVmVjdG9yMygpO1xuICAgIGlmICghdmVjTWF4KSB7XG4gICAgICByZXR1cm4gdmVjTWluID8gdGFyZ2V0LmNvcHkodmVjTWluKSA6IHRhcmdldC5zZXQoMCwgMCwgMCk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQuc2V0KFxuICAgICAgdGhpcy5nZXRSYW5kb21CZXR3ZWVuKHZlY01pbi54LCB2ZWNNYXgueCksXG4gICAgICB0aGlzLmdldFJhbmRvbUJldHdlZW4odmVjTWluLnksIHZlY01heC55KSxcbiAgICAgIHRoaXMuZ2V0UmFuZG9tQmV0d2Vlbih2ZWNNaW4ueiwgdmVjTWF4LnopXG4gICAgKTtcbiAgfSxcblxuICAvKipcbiAgICogTGVycCBiZXR3ZWVuIHR3byBjb2xvcnMsIHJldHVybmluZyBhIG5ldyBjb2xvciB3aXRob3V0IGNoYW5naW5nIGFueSBvZiB0aGVtLlxuICAgKi9cbiAgbGVycENvbG9yczogZnVuY3Rpb24gKGNvbEEsIGNvbEIsIGFscGhhLCB0YXJnZXQpIHtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFRIUkVFLkNvbG9yKCk7XG4gICAgcmV0dXJuIHRhcmdldC5jb3B5KGNvbEEpLmxlcnAoY29sQiwgYWxwaGEpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBMZXJwIGJldHdlZW4gdHdvIG51bWJlcnMuXG4gICAqL1xuICBsZXJwOiBmdW5jdGlvbiAoeCwgeSwgYWxwaGEpIHtcbiAgICByZXR1cm4geCAqICgxIC0gYWxwaGEpICsgeSAqIGFscGhhO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgY29uc3QgbnVtZXJpYyB2YWx1ZSBvciBnZW5lcmF0ZSByYW5kb20gdmFsdWUgZnJvbSByYW5kb21pemVyLlxuICAgKi9cbiAgcmFuZG9taXplck9yVmFsdWU6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gKHZhbC5nZW5lcmF0ZSA/IHZhbC5nZW5lcmF0ZSgpIDogdmFsKSB8fCAwO1xuICB9XG59O1xuIiwiLyoqXG4gKiBJbXBsZW1lbnQgYSBzaW5nbGUgcGFydGljbGUgaW4gdGhlIHBhcnRpY2xlcyBzeXN0ZW0uXG4gKiBBdXRob3I6IFJvbmVuIE5lc3MuXG4gKiBTaW5jZTogMjAxOS5cbiAqL1xuY29uc3QgVEhSRUUgPSByZXF1aXJlKFwidGhyZWVcIik7XG5jb25zdCBVdGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5jb25zdCBUTVAxID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCk7XG5jb25zdCBUTVAyID0gbmV3IFRIUkVFLlZlY3RvcjMoMCwgMCwgMCk7XG5cbmNvbnN0IFRNUF9DT0xPUiA9IG5ldyBUSFJFRS5Db2xvcigxLCAxLCAxKTtcblxuLyoqXG4gKiBBIHNpbmdsZSBwYXJ0aWNsZSBtZXRhZGF0YSBpbiB0aGUgcGFydGljbGVzIHN5c3RlbS5cbiAqIFdlIGF0dGFjaCB0aGlzIHRvIHRoZSBwYXJ0aWNsZSdzIHZlcnRpY2VzIHdoZW4gaW4gc3lzdGVtJ3MgZ2VvbWV0cnkuXG4gKi9cbmNsYXNzIFBhcnRpY2xlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgcGFydGljbGUuXG4gICAqIEBwYXJhbSB7UGFydGljbGVzU3lzdGVtfSBzeXN0ZW0gVGhlIHBhcnRpY2xlcyBzeXN0ZW0gdGhpcyBwYXJ0aWNsZSBiZWxvbmdzIHRvLlxuICAgKi9cbiAgY29uc3RydWN0b3Ioc3lzdGVtKSB7XG4gICAgdGhpcy5zeXN0ZW0gPSBzeXN0ZW07XG4gICAgLyogIHRoaXMudmVsb2NpdHkgPSBudWxsO1xuICAgIHRoaXMuYWNjZWxlcmF0aW9uID0gbnVsbDsgLy8gb3B0aW9uYWxcbiAgICB0aGlzLnBvc2l0aW9uID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0Q29sb3IgPSBudWxsO1xuICAgIHRoaXMuZW5kQ29sb3IgPSBudWxsO1xuICAgIHRoaXMuZ3Jhdml0eVggPSAwO1xuICAgIHRoaXMuZ3Jhdml0eVkgPSAwO1xuICAgIHRoaXMuZ3Jhdml0eVogPSAwO1xuICAgIHRoaXMuYWdlID0gMDtcbiAgICB0aGlzLmZpbmlzaGVkID0gZmFsc2U7XG4gICAgdGhpcy50dGwgPSBudWxsO1xuICAgIHRoaXMuYWxwaGEgPSBudWxsO1xuICAgIHRoaXMuc3RhcnRBbHBoYSA9IG51bGw7XG4gICAgdGhpcy5lbmRBbHBoYSA9IG51bGw7XG4gICAgdGhpcy5zdGFydEFscGhhQ2hhbmdlQXQgPSBudWxsO1xuICAgIHRoaXMuc3RhcnRDb2xvckNoYW5nZUF0ID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0U2l6ZUNoYW5nZUF0ID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0V29ybGRQb3NpdGlvbiA9IG51bGw7XG4gICAgdGhpcy5vblVwZGF0ZSA9IG51bGw7Ki9cblxuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUgcGFydGljbGUuXG4gICAqL1xuICByZXNldCgpIHtcbiAgICBjb25zdCBvcHRpb25zID0gdGhpcy5zeXN0ZW0ub3B0aW9ucy5wYXJ0aWNsZXM7XG5cbiAgICAvLyByZXNldCBwYXJ0aWNsZSBhZ2UgYW5kIGlmIGFsaXZlXG4gICAgdGhpcy5hZ2UgPSAwO1xuICAgIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAgIC8vIHN0b3JlIGdyYXZpdHkgZm9yY2VcbiAgICB0aGlzLmdyYXZpdHlYID0gb3B0aW9ucy5ncmF2aXR5WDtcbiAgICB0aGlzLmdyYXZpdHlZID0gb3B0aW9ucy5ncmF2aXR5WSB8fCBvcHRpb25zLmdyYXZpdHk7XG4gICAgdGhpcy5ncmF2aXR5WiA9IG9wdGlvbnMuZ3Jhdml0eVo7XG5cbiAgICAvLyBwYXJ0aWNsZSdzIHZlbG9jaXR5IGFuZCB2ZWxvY2l0eSBib251c1xuICAgIHRoaXMudmVsb2NpdHkgPSBnZXRDb25zdE9yUmFuZG9tVmVjdG9yKHRoaXMudmVsb2NpdHksIG9wdGlvbnMudmVsb2NpdHkpO1xuXG4gICAgaWYgKG9wdGlvbnMudmVsb2NpdHlCb251cykge1xuICAgICAgdGhpcy52ZWxvY2l0eS5hZGQob3B0aW9ucy52ZWxvY2l0eUJvbnVzKTtcbiAgICB9XG5cbiAgICAvLyBwYXJ0aWNsZSdzIGFjY2VsZXJhdGlvbi5cbiAgICB0aGlzLmFjY2VsZXJhdGlvbiA9IGdldENvbnN0T3JSYW5kb21WZWN0b3IodGhpcy5hY2NlbGVyYXRpb24sIG9wdGlvbnMuYWNjZWxlcmF0aW9uLCB0cnVlKTtcblxuICAgIC8vIHN0YXJ0aW5nIG9mZnNldFxuICAgIHRoaXMucG9zaXRpb24gPSBnZXRDb25zdE9yUmFuZG9tVmVjdG9yKHRoaXMucG9zaXRpb24sIG9wdGlvbnMub2Zmc2V0KTtcbiAgICAvLyBpZiB0aGVyZSBpcyBhIGJvdW5kIG9iamVjdCwgd2UgdGFrZSBpdHMgcG9zaXRpb24gYXMgc3RhcnRcbiAgICAvLyBpZiAodGhpcy5zeXN0ZW0uYm91bmRPYmplY3QpIHtcbiAgICAvLyAgIHRoaXMucG9zaXRpb24gPSB0aGlzLnBvc2l0aW9uLmFkZCh0aGlzLnN5c3RlbS5ib3VuZE9iamVjdC5wb3NpdGlvbik7XG4gICAgLy8gfVxuICAgIC8vIHNldCBwYXJ0aWNsZSdzIHR0bFxuICAgIHRoaXMudHRsID0gVXRpbHMuZ2V0UmFuZG9tV2l0aFNwcmVhZChvcHRpb25zLnR0bCB8fCAxLCBvcHRpb25zLnR0bEV4dHJhKSB8fCAxO1xuXG4gICAgLy8gc2V0IHBlci1wYXJ0aWNsZSBhbHBoYVxuICAgIHRoaXMuYWxwaGEgPSB0aGlzLnN0YXJ0QWxwaGEgPSB0aGlzLmVuZEFscGhhID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0QWxwaGFDaGFuZ2VBdCA9IChvcHRpb25zLnN0YXJ0QWxwaGFDaGFuZ2VBdCB8fCAwKSAvIHRoaXMudHRsO1xuICAgIGlmIChvcHRpb25zLmZhZGUpIHtcbiAgICAgIC8vIGNvbnN0IGFscGhhIHRocm91Z2hvdXQgcGFydGljbGUncyBsaWZlP1xuICAgICAgaWYgKG9wdGlvbnMuYWxwaGEgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLmFscGhhID0gVXRpbHMucmFuZG9taXplck9yVmFsdWUob3B0aW9ucy5hbHBoYSk7XG4gICAgICB9XG4gICAgICAvLyBzaGlmdGluZyBhbHBoYT9cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXJ0QWxwaGEgPSBVdGlscy5yYW5kb21pemVyT3JWYWx1ZShvcHRpb25zLnN0YXJ0QWxwaGEpO1xuICAgICAgICB0aGlzLmVuZEFscGhhID0gVXRpbHMucmFuZG9taXplck9yVmFsdWUob3B0aW9ucy5lbmRBbHBoYSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0IHBlci1wYXJ0aWNsZSBjb2xvcmluZ1xuICAgIHRoaXMuY29sb3JpemUgPSBCb29sZWFuKG9wdGlvbnMuY29sb3JpemUpO1xuICAgIHRoaXMuY29sb3IgPSB0aGlzLnN0YXJ0Q29sb3IgPSB0aGlzLmVuZENvbG9yID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0Q29sb3JDaGFuZ2VBdCA9IChvcHRpb25zLnN0YXJ0Q29sb3JDaGFuZ2VBdCB8fCAwKSAvIHRoaXMudHRsO1xuICAgIGlmICh0aGlzLmNvbG9yaXplKSB7XG4gICAgICAvLyBjb25zdCBjb2xvciB0aHJvdWdob3V0IHBhcnRpY2xlJ3MgbGlmZT9cbiAgICAgIGlmIChvcHRpb25zLmNvbG9yKSB7XG4gICAgICAgIHRoaXMuY29sb3IgPSBnZXRDb25zdE9yUmFuZG9tQ29sb3IodGhpcy5jb2xvciwgb3B0aW9ucy5jb2xvcik7XG4gICAgICB9XG4gICAgICAvLyBzaGlmdGluZyBjb2xvcj9cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLnN0YXJ0Q29sb3IgPSBnZXRDb25zdE9yUmFuZG9tQ29sb3IodGhpcy5zdGFydENvbG9yLCBvcHRpb25zLnN0YXJ0Q29sb3IpO1xuICAgICAgICB0aGlzLmVuZENvbG9yID0gZ2V0Q29uc3RPclJhbmRvbUNvbG9yKHRoaXMuZW5kQ29sb3IsIG9wdGlvbnMuZW5kQ29sb3IpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNldCBwZXItcGFydGljbGUgc2l6ZVxuICAgIHRoaXMuc2l6ZSA9IHRoaXMuc3RhcnRTaXplID0gdGhpcy5lbmRTaXplID0gbnVsbDtcbiAgICB0aGlzLnN0YXJ0U2l6ZUNoYW5nZUF0ID0gKG9wdGlvbnMuc3RhcnRTaXplQ2hhbmdlQXQgfHwgMCkgLyB0aGlzLnR0bDtcbiAgICBpZiAob3B0aW9ucy5zY2FsaW5nKSB7XG4gICAgICAvLyBjb25zdCBzaXplIHRocm91Z2hvdXQgcGFydGljbGUncyBsaWZlP1xuICAgICAgaWYgKG9wdGlvbnMuc2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuc2l6ZSA9IFV0aWxzLnJhbmRvbWl6ZXJPclZhbHVlKG9wdGlvbnMuc2l6ZSk7XG4gICAgICB9XG4gICAgICAvLyBzaGlmdGluZyBzaXplP1xuICAgICAgZWxzZSB7XG4gICAgICAgIHRoaXMuc3RhcnRTaXplID0gVXRpbHMucmFuZG9taXplck9yVmFsdWUob3B0aW9ucy5zdGFydFNpemUpO1xuICAgICAgICB0aGlzLmVuZFNpemUgPSBVdGlscy5yYW5kb21pemVyT3JWYWx1ZShvcHRpb25zLmVuZFNpemUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIHNldCBwZXItcGFydGljbGUgcm90YXRpb25cbiAgICB0aGlzLnJvdGF0aW9uID0gdGhpcy5yb3RhdGlvblNwZWVkID0gbnVsbDtcbiAgICBpZiAob3B0aW9ucy5yb3RhdGluZykge1xuICAgICAgdGhpcy5yb3RhdGlvbiA9IFV0aWxzLnJhbmRvbWl6ZXJPclZhbHVlKG9wdGlvbnMucm90YXRpb24gfHwgMCk7XG4gICAgICB0aGlzLnJvdGF0aW9uU3BlZWQgPSBVdGlscy5yYW5kb21pemVyT3JWYWx1ZShvcHRpb25zLnJvdGF0aW9uU3BlZWQgfHwgMCk7XG4gICAgfVxuXG4gICAgLy8gdXNlZCB0byBrZWVwIGNvbnN0YW50IHdvcmxkIHBvc2l0aW9uXG4gICAgdGhpcy5zdGFydFdvcmxkUG9zaXRpb24gPSBudWxsO1xuXG4gICAgLy8gc3RvcmUgb24tdXBkYXRlIGNhbGxiYWNrLCBpZiBkZWZpbmVkXG4gICAgdGhpcy5vblVwZGF0ZSA9IG9wdGlvbnMub25VcGRhdGU7XG5cbiAgICAvLyBjYWxsIGN1c3RvbSBzcGF3biBtZXRob2RcbiAgICBpZiAob3B0aW9ucy5vblNwYXduKSB7XG4gICAgICBvcHRpb25zLm9uU3Bhd24odGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgcGFydGljbGUgKGNhbGwgdGhpcyBldmVyeSBmcmFtZSkuXG4gICAqIEBwYXJhbSB7Kn0gaW5kZXggUGFydGljbGUgaW5kZXggaW4gc3lzdGVtLlxuICAgKiBAcGFyYW0geyp9IGRlbHRhVGltZSBVcGRhdGUgZGVsdGEgdGltZS5cbiAgICovXG4gIHVwZGF0ZShpbmRleCwgZGVsdGFUaW1lKSB7XG4gICAgLy8gaWYgZmluaXNoZWQsIHNraXBcbiAgICBpZiAodGhpcy5maW5pc2hlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIGlzIGl0IGZpcnN0IHVwZGF0ZSBjYWxsP1xuICAgIGNvbnN0IGZpcnN0VXBkYXRlID0gdGhpcy5hZ2UgPT09IDA7XG5cbiAgICAvLyBkbyBmaXJzdC11cGRhdGUgc3R1ZmZcbiAgICBpZiAoZmlyc3RVcGRhdGUpIHtcbiAgICAgIC8vIGlmIGl0cyBmaXJzdCB1cGRhdGUgYW5kIHVzZSB3b3JsZCBwb3NpdGlvbiwgc3RvcmUgY3VycmVudCB3b3JsZCBwb3NpdGlvblxuICAgICAgaWYgKHRoaXMuc3lzdGVtLm9wdGlvbnMucGFydGljbGVzLndvcmxkUG9zaXRpb24pIHtcbiAgICAgICAgdGhpcy5zdGFydFdvcmxkUG9zaXRpb24gPSB0aGlzLnN5c3RlbS5nZXRXb3JsZFBvc2l0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBjb25zdGFudCBhbHBoYVxuICAgICAgaWYgKHRoaXMuYWxwaGEgIT09IG51bGwgfHwgdGhpcy5zdGFydEFscGhhICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnNldEFscGhhKGluZGV4LCB0aGlzLmFscGhhIHx8IHRoaXMuc3RhcnRBbHBoYSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBjb25zdGFudCBjb2xvclxuICAgICAgaWYgKHRoaXMuY29sb3IgIT09IG51bGwgfHwgdGhpcy5zdGFydENvbG9yICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnNldENvbG9yKGluZGV4LCB0aGlzLmNvbG9yIHx8IHRoaXMuc3RhcnRDb2xvcik7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBjb25zdGFudCBzaXplXG4gICAgICBpZiAodGhpcy5zaXplICE9PSBudWxsIHx8IHRoaXMuc3RhcnRTaXplICE9PSBudWxsKSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnNldFNpemUoaW5kZXgsIHRoaXMuc2l6ZSB8fCB0aGlzLnN0YXJ0U2l6ZSk7XG4gICAgICB9XG5cbiAgICAgIC8vIHNldCBzdGFydCByb3RhdGlvblxuICAgICAgaWYgKHRoaXMucm90YXRpb24gIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5zeXN0ZW0uc2V0Um90YXRpb24oaW5kZXgsIHRoaXMucm90YXRpb24pO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBkbyBub3JtYWwgdXBkYXRlc1xuICAgIGVsc2Uge1xuICAgICAgLy8gc2V0IGFuaW1hdGVkIGNvbG9yXG4gICAgICBpZiAodGhpcy5zdGFydENvbG9yICYmIHRoaXMuYWdlID49IHRoaXMuc3RhcnRDb2xvckNoYW5nZUF0KSB7XG4gICAgICAgIHRoaXMuc3lzdGVtLnNldENvbG9yKFxuICAgICAgICAgIGluZGV4LFxuICAgICAgICAgIFV0aWxzLmxlcnBDb2xvcnMoXG4gICAgICAgICAgICB0aGlzLnN0YXJ0Q29sb3IsXG4gICAgICAgICAgICB0aGlzLmVuZENvbG9yLFxuICAgICAgICAgICAgdGhpcy5zdGFydENvbG9yQ2hhbmdlQXRcbiAgICAgICAgICAgICAgPyAodGhpcy5hZ2UgLSB0aGlzLnN0YXJ0Q29sb3JDaGFuZ2VBdCkgLyAoMSAtIHRoaXMuc3RhcnRDb2xvckNoYW5nZUF0KVxuICAgICAgICAgICAgICA6IHRoaXMuYWdlLFxuICAgICAgICAgICAgVE1QX0NPTE9SXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgYW5pbWF0ZWQgYWxwaGFcbiAgICAgIGlmICh0aGlzLnN0YXJ0QWxwaGEgIT0gbnVsbCAmJiB0aGlzLmFnZSA+PSB0aGlzLnN0YXJ0QWxwaGFDaGFuZ2VBdCkge1xuICAgICAgICB0aGlzLnN5c3RlbS5zZXRBbHBoYShcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICBVdGlscy5sZXJwKFxuICAgICAgICAgICAgdGhpcy5zdGFydEFscGhhLFxuICAgICAgICAgICAgdGhpcy5lbmRBbHBoYSxcbiAgICAgICAgICAgIHRoaXMuc3RhcnRBbHBoYUNoYW5nZUF0XG4gICAgICAgICAgICAgID8gKHRoaXMuYWdlIC0gdGhpcy5zdGFydEFscGhhQ2hhbmdlQXQpIC8gKDEgLSB0aGlzLnN0YXJ0QWxwaGFDaGFuZ2VBdClcbiAgICAgICAgICAgICAgOiB0aGlzLmFnZVxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IGFuaW1hdGVkIHNpemVcbiAgICAgIGlmICh0aGlzLnN0YXJ0U2l6ZSAhPSBudWxsICYmIHRoaXMuYWdlID49IHRoaXMuc3RhcnRTaXplQ2hhbmdlQXQpIHtcbiAgICAgICAgdGhpcy5zeXN0ZW0uc2V0U2l6ZShcbiAgICAgICAgICBpbmRleCxcbiAgICAgICAgICBVdGlscy5sZXJwKFxuICAgICAgICAgICAgdGhpcy5zdGFydFNpemUsXG4gICAgICAgICAgICB0aGlzLmVuZFNpemUsXG4gICAgICAgICAgICB0aGlzLnN0YXJ0U2l6ZUNoYW5nZUF0XG4gICAgICAgICAgICAgID8gKHRoaXMuYWdlIC0gdGhpcy5zdGFydFNpemVDaGFuZ2VBdCkgLyAoMSAtIHRoaXMuc3RhcnRTaXplQ2hhbmdlQXQpXG4gICAgICAgICAgICAgIDogdGhpcy5hZ2VcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2V0IGFuaW1hdGVkIHJvdGF0aW9uXG4gICAgaWYgKHRoaXMucm90YXRpb25TcGVlZCkge1xuICAgICAgdGhpcy5yb3RhdGlvbiArPSB0aGlzLnJvdGF0aW9uU3BlZWQgKiBkZWx0YVRpbWU7XG4gICAgICB0aGlzLnN5c3RlbS5zZXRSb3RhdGlvbihpbmRleCwgdGhpcy5yb3RhdGlvbik7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHBvc2l0aW9uXG4gICAgaWYgKHRoaXMudmVsb2NpdHkpIHtcbiAgICAgIC8vIGFkZCBncmF2aXR5IGZvcmNlXG4gICAgICBpZiAodGhpcy5ncmF2aXR5WCkgdGhpcy52ZWxvY2l0eS54ICs9IHRoaXMuZ3Jhdml0eVggKiBkZWx0YVRpbWU7XG4gICAgICBpZiAodGhpcy5ncmF2aXR5WSkgdGhpcy52ZWxvY2l0eS55ICs9IHRoaXMuZ3Jhdml0eVkgKiBkZWx0YVRpbWU7XG4gICAgICBpZiAodGhpcy5ncmF2aXR5WikgdGhpcy52ZWxvY2l0eS56ICs9IHRoaXMuZ3Jhdml0eVogKiBkZWx0YVRpbWU7XG5cbiAgICAgIHRoaXMucG9zaXRpb24ueCArPSB0aGlzLnZlbG9jaXR5LnggKiBkZWx0YVRpbWU7XG4gICAgICB0aGlzLnBvc2l0aW9uLnkgKz0gdGhpcy52ZWxvY2l0eS55ICogZGVsdGFUaW1lO1xuICAgICAgdGhpcy5wb3NpdGlvbi56ICs9IHRoaXMudmVsb2NpdHkueiAqIGRlbHRhVGltZTtcbiAgICB9XG4gICAgbGV0IHBvc2l0aW9uVG9TZXQgPSBUTVAxLnNldCh0aGlzLnBvc2l0aW9uLngsIHRoaXMucG9zaXRpb24ueSwgdGhpcy5wb3NpdGlvbi56KTtcblxuICAgIC8vIHRvIG1haW50YWluIHdvcmxkIHBvc2l0aW9uXG4gICAgaWYgKHRoaXMuc3RhcnRXb3JsZFBvc2l0aW9uKSB7XG4gICAgICBjb25zdCBzeXN0ZW1Qb3MgPSB0aGlzLnN5c3RlbS5nZXRXb3JsZFBvc2l0aW9uKFRNUDIpOyAvLyByZXR1cm5zIFRNUDJcbiAgICAgIHN5c3RlbVBvcy5zdWIodGhpcy5zdGFydFdvcmxkUG9zaXRpb24pO1xuICAgICAgcG9zaXRpb25Ub1NldCA9IHBvc2l0aW9uVG9TZXQuc3ViKHN5c3RlbVBvcyk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHBvc2l0aW9uIGluIHN5c3RlbVxuICAgIC8vIGJlIGF3YXJlLCB0aGF0IHBvc2l0aW9uVG9TZXQgaXMgYSB0ZW1wLXZlY3RvciBhdCB0aGlzIHBvaW50LFxuICAgIC8vIHNvIGRvIG5vdCBzdG9yZSBpdCBhbnl3aGVyZVxuICAgIHRoaXMuc3lzdGVtLnNldFBvc2l0aW9uKGluZGV4LCBwb3NpdGlvblRvU2V0KTtcblxuICAgIC8vIHVwZGF0ZSB2ZWxvY2l0eVxuICAgIGlmICh0aGlzLmFjY2VsZXJhdGlvbiAmJiB0aGlzLnZlbG9jaXR5KSB7XG4gICAgICB0aGlzLnZlbG9jaXR5LnggKz0gdGhpcy5hY2NlbGVyYXRpb24ueCAqIGRlbHRhVGltZTtcbiAgICAgIHRoaXMudmVsb2NpdHkueSArPSB0aGlzLmFjY2VsZXJhdGlvbi55ICogZGVsdGFUaW1lO1xuICAgICAgdGhpcy52ZWxvY2l0eS56ICs9IHRoaXMuYWNjZWxlcmF0aW9uLnogKiBkZWx0YVRpbWU7XG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIGFnZS4gbm90ZTogdXNlIHR0bCBhcyBmYWN0b3IsIHNvIHRoYXQgYWdlIGlzIGFsd2F5cyBiZXR3ZWVuIDAgYW5kIDFcbiAgICB0aGlzLmFnZSArPSBkZWx0YVRpbWUgLyB0aGlzLnR0bDtcblxuICAgIC8vIGNhbGwgY3VzdG9tIG1ldGhvZHNcbiAgICBpZiAodGhpcy5vblVwZGF0ZSkge1xuICAgICAgdGhpcy5vblVwZGF0ZSh0aGlzKTtcbiAgICB9XG5cbiAgICAvLyBpcyBkb25lPyBzZXQgYXMgZmluaXNoZWQgYW5kIGNvbnRpbnVlIHRvIHNldCBmaW5hbCBzdGF0ZVxuICAgIGlmICh0aGlzLmFnZSA+IDEpIHtcbiAgICAgIHRoaXMuYWdlID0gMTtcbiAgICAgIHRoaXMuZmluaXNoZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcGFydGljbGUncyB3b3JsZCBwb3NpdGlvbi5cbiAgICovXG4gIGdldCB3b3JsZFBvc2l0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLnN5c3RlbS5nZXRXb3JsZFBvc2l0aW9uKCkuYWRkKHRoaXMucG9zaXRpb24pO1xuICB9XG59XG5cbi8qKlxuICogUmV0dXJuIGVpdGhlciB0aGUgdmFsdWUgb2YgYSByYW5kb21pemVyLCBhIGNvbnN0IHZhbHVlLCBvciBhIGRlZmF1bHQgZW1wdHkgb3IgbnVsbC5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29uc3RPclJhbmRvbVZlY3Rvcih0YXJnZXQsIGNvbnN0VmFsT3JSYW5kb21pemVyLCByZXR1cm5OdWxsSWZVbmRlZmluZWQpIHtcbiAgdGFyZ2V0ID0gdGFyZ2V0IHx8IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gIGlmICghY29uc3RWYWxPclJhbmRvbWl6ZXIpIHJldHVybiByZXR1cm5OdWxsSWZVbmRlZmluZWQgPyBudWxsIDogdGFyZ2V0LnNldCgwLCAwLCAwKTtcbiAgaWYgKGNvbnN0VmFsT3JSYW5kb21pemVyLmdlbmVyYXRlKSByZXR1cm4gY29uc3RWYWxPclJhbmRvbWl6ZXIuZ2VuZXJhdGUodGFyZ2V0KTtcbiAgcmV0dXJuIHRhcmdldC5jb3B5KGNvbnN0VmFsT3JSYW5kb21pemVyKTtcbn1cblxuLyoqXG4gKiBSZXR1cm4gZWl0aGVyIHRoZSB2YWx1ZSBvZiBhIHJhbmRvbWl6ZXIsIGEgY29uc3QgdmFsdWUsIG9yIGEgZGVmYXVsdCBlbXB0eSBvciBudWxsLlxuICovXG5mdW5jdGlvbiBnZXRDb25zdE9yUmFuZG9tQ29sb3IodGFyZ2V0LCBjb25zdFZhbE9yUmFuZG9taXplciwgcmV0dXJuTnVsbElmVW5kZWZpbmVkKSB7XG4gIHRhcmdldCA9IHRhcmdldCB8fCBuZXcgVEhSRUUuQ29sb3IoKTtcbiAgaWYgKCFjb25zdFZhbE9yUmFuZG9taXplcikgcmV0dXJuIHJldHVybk51bGxJZlVuZGVmaW5lZCA/IG51bGwgOiB0YXJnZXQuc2V0UkdCKDEsIDEsIDEpO1xuICBpZiAoY29uc3RWYWxPclJhbmRvbWl6ZXIuZ2VuZXJhdGUpIHJldHVybiBjb25zdFZhbE9yUmFuZG9taXplci5nZW5lcmF0ZSh0YXJnZXQpO1xuICByZXR1cm4gdGFyZ2V0LmNvcHkoY29uc3RWYWxPclJhbmRvbWl6ZXIpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRpY2xlO1xuIiwiLyoqXG4gKiBJbXBsZW1lbnQgdmVydGV4IHNoYWRlciBmb3Igb3VyIHBhcnRpY2xlcy5cbiAqIEF1dGhvcjogUm9uZW4gTmVzcy5cbiAqIFNpbmNlOiAyMDE5LlxuICovXG52YXIgY29kZSA9IGBcbi8vIGF0dHJpYnV0ZXMgd2UgZ2V0IGZyb20gZ2VvbWV0cnlcbmF0dHJpYnV0ZSBmbG9hdCBhbHBoYTtcblxuLy8gcGVyLXBhcnRpY2xlIHNpemVcbiNpZmRlZiBDT05TVF9TSVpFXG4gICAgdW5pZm9ybSBmbG9hdCBjb25zdFNpemU7XG4jZWxzZVxuICAgIGF0dHJpYnV0ZSBmbG9hdCBzaXplO1xuI2VuZGlmXG5cbi8vIHBlci1wYXJ0aWNsZSByb3RhdGlvblxuI2lmZGVmIFJPVEFUSU9OXG4gICAgYXR0cmlidXRlIGZsb2F0IHJvdGF0aW9uO1xuI2VuZGlmXG5cbi8vIHN5c3RlbSBzY2FsZSB3aGVuIHVzaW5nIHBlcnNwZWN0aXZlIG1vZGVcbiNpZmRlZiBQRVJTUEVDVElWRVxuICAgIHVuaWZvcm0gZmxvYXQgcmVuZGVyZXJTY2FsZTtcbiNlbmRpZlxuXG4vLyBvdXRwdXQgcGFyYW1zIGZvciBmcmFnbWVudCBzaGFkZXJcbnZhcnlpbmcgZmxvYXQgdkFscGhhO1xuXG4vLyBzZXQgcGVyLXBhcnRpY2xlIGNvbG9yXG4jaWZkZWYgQ09MT1JJTkdcbiAgICB2YXJ5aW5nIHZlYzMgdkNvbG9yO1xuI2VuZGlmXG5cbi8vIGdldCBwZXItcGFydGljbGUgcm90YXRpb25cbiNpZmRlZiBST1RBVElPTlxuICAgIHZhcnlpbmcgZmxvYXQgdlJvdGF0aW9uO1xuI2VuZGlmXG5cbi8vIHZlcnRleCBzaGFkZXIgbWFpblxudm9pZCBtYWluKCkgXG57XG4gICAgLy8gYWxwaGEgYW5kIGNvbG9yXG4gICAgdkFscGhhID0gYWxwaGE7XG5cbiAgICAvLyBzZXQgY29sb3JcbiAgICAjaWZkZWYgQ09MT1JJTkdcbiAgICAgICAgdkNvbG9yID0gY29sb3I7XG4gICAgI2VuZGlmXG5cbiAgICAvLyBzZXQgY29uc3Qgc2l6ZVxuICAgICNpZmRlZiBDT05TVF9TSVpFXG4gICAgICAgIGZsb2F0IHNpemUgPSBjb25zdFNpemU7XG4gICAgI2VuZGlmXG5cbiAgICAvLyBzZXQgcG9zaXRpb25cbiAgICB2ZWM0IG12UG9zaXRpb24gPSBtb2RlbFZpZXdNYXRyaXggKiB2ZWM0KCBwb3NpdGlvbiwgMS4wICk7XG4gICAgZ2xfUG9zaXRpb24gPSBwcm9qZWN0aW9uTWF0cml4ICogbXZQb3NpdGlvbjtcblxuICAgIC8vIGFwcGx5IHJvdGF0aW9uXG4gICAgI2lmZGVmIFJPVEFUSU9OXG4gICAgICAgIHZSb3RhdGlvbiA9IHJvdGF0aW9uO1xuICAgICNlbmRpZlxuICAgIFxuICAgIC8vIHNldCBzaXplIC0gZWl0aGVyIHBlcnNwZWN0aXZlIG9yIGNvbnN0YW50XG4gICAgI2lmZGVmIFBFUlNQRUNUSVZFXG4gICAgICAgIGdsX1BvaW50U2l6ZSA9IHNpemUgKiAocmVuZGVyZXJTY2FsZSAvIGxlbmd0aChtdlBvc2l0aW9uLnh5eikpO1xuICAgICNlbHNlXG4gICAgICAgIGdsX1BvaW50U2l6ZSA9IHNpemU7XG4gICAgI2VuZGlmXG59XG5gO1xubW9kdWxlLmV4cG9ydHMgPSBjb2RlOyIsIi8qKlxuICogSW1wbGVtZW50IGZyYWdtZW50IHNoYWRlciBmb3Igb3VyIHBhcnRpY2xlcy5cbiAqIEF1dGhvcjogUm9uZW4gTmVzcy5cbiAqIFNpbmNlOiAyMDE5LlxuICovXG52YXIgY29kZSA9IGBcbi8vIG1hdGVyaWFsIHVuaWZvcm1zXG51bmlmb3JtIHZlYzMgZ2xvYmFsQ29sb3I7XG5cbi8vIHBhcmFtcyB3ZSBnZXQgZnJvbSB2ZXJ0ZXggc2hhZGVyXG52YXJ5aW5nIGZsb2F0IHZBbHBoYTtcblxuLy8gcGVyLXBhcnRpY2xlIGNvbG9yIGZyb20gdmVydGV4IHNoYWRlclxuI2lmZGVmIENPTE9SSU5HXG4gICAgdmFyeWluZyB2ZWMzIHZDb2xvcjtcbiNlbmRpZlxuXG4vLyBwZXItcGFydGljbGUgcm90YXRpb24gZnJvbSB2ZXJ0ZXggc2hhZGVyXG4jaWZkZWYgUk9UQVRJT05cbiAgICB2YXJ5aW5nIGZsb2F0IHZSb3RhdGlvbjtcbiNlbmRpZlxuXG4vLyBkaWZmdXNlIHRleHR1cmVcbiNpZmRlZiBURVhUVVJFXG4gICAgdW5pZm9ybSBzYW1wbGVyMkQgX3RleHR1cmU7XG4jZW5kaWZcblxuLy8gZnJhZ21lbnQgc2hhZGVyIG1haW5cbnZvaWQgbWFpbigpIFxue1xuICAgIC8vIHNldCBkZWZhdWx0IGNvbG9yIGlmIGRvbid0IGhhdmUgcGVyLXBhcnRpY2xlIGNvbG9yc1xuICAgICNpZm5kZWYgQ09MT1JJTkdcbiAgICAgICAgdmVjMyB2Q29sb3IgPSB2ZWMzKDEsMSwxKTtcbiAgICAjZW5kaWZcblxuICAgIC8vIHRleHR1cmVcbiAgICAjaWZkZWYgVEVYVFVSRVxuXG4gICAgICAgIC8vIHVzZSByb3RhdGlvbiAocm90YXRlIHRleHR1cmUpXG4gICAgICAgICNpZmRlZiBST1RBVElPTlxuICAgICAgICAgICAgZmxvYXQgbWlkID0gMC41O1xuICAgICAgICAgICAgdmVjMiByb3RhdGVkID0gdmVjMihjb3ModlJvdGF0aW9uKSAqIChnbF9Qb2ludENvb3JkLnggLSBtaWQpICsgc2luKHZSb3RhdGlvbikgKiAoZ2xfUG9pbnRDb29yZC55IC0gbWlkKSArIG1pZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29zKHZSb3RhdGlvbikgKiAoZ2xfUG9pbnRDb29yZC55IC0gbWlkKSAtIHNpbih2Um90YXRpb24pICogKGdsX1BvaW50Q29vcmQueCAtIG1pZCkgKyBtaWQpO1xuICAgICAgICAgICAgdmVjNCB0ZXh0dXJlQ29sID0gdGV4dHVyZTJEKF90ZXh0dXJlLCAgcm90YXRlZCk7XG4gICAgICAgIC8vIG5vIHJvdGF0aW9uXG4gICAgICAgICNlbHNlXG4gICAgICAgICAgICB2ZWMyIGNvb3JkcyA9IHZlYzIoKGdsX1BvaW50Q29vcmQueCAtIDAuNSkgKyAwLjUsIChnbF9Qb2ludENvb3JkLnkgLSAwLjUpICsgMC41KTtcbiAgICAgICAgICAgIHZlYzQgdGV4dHVyZUNvbCA9IHRleHR1cmUyRChfdGV4dHVyZSwgY29vcmRzKTtcbiAgICAgICAgI2VuZGlmXG5cbiAgICAgICAgLy8gZ2V0IGNvbG9yIHdpdGggdGV4dHVyZVxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCBnbG9iYWxDb2xvciAqIHZDb2xvciwgdkFscGhhICkgKiB0ZXh0dXJlQ29sO1xuICAgICAgICBcbiAgICAvLyBubyB0ZXh0dXJlIChjb2xvcnMgb25seSlcbiAgICAjZWxzZVxuICAgICAgICBnbF9GcmFnQ29sb3IgPSB2ZWM0KCBnbG9iYWxDb2xvciAqIHZDb2xvciwgdkFscGhhICk7XG4gICAgI2VuZGlmXG5cbiAgICAvLyBjaGVjayBpZiBuZWVkIHRvIGRpc2NhcmQgcGl4ZWxcbiAgICAjaWZkZWYgQUxQSEFfVEVTVFxuICAgICAgICBpZiAoZ2xfRnJhZ0NvbG9yLmEgPCAwLjAwMDAxKSB7IGRpc2NhcmQ7IH1cbiAgICAjZW5kaWZcbn1cbmA7XG5tb2R1bGUuZXhwb3J0cyA9IGNvZGU7IiwiLyoqXG4gKiBDcmVhdGUgdGhlIHNoYWRlciBtYXRlcmlhbC5cbiAqIEF1dGhvcjogUm9uZW4gTmVzcy5cbiAqIFNpbmNlOiAyMDE5LlxuICovXG5jb25zdCBUSFJFRSA9IHJlcXVpcmUoJ3RocmVlJyk7XG5jb25zdCBWZXJ0ZXhTaGFkZXJDb2RlID0gcmVxdWlyZSgnLi9zaGFkZXJzL3ZlcnRleCcpO1xuY29uc3QgRnJhZ21lbnRTaGFkZXJDb2RlID0gcmVxdWlyZSgnLi9zaGFkZXJzL2ZyYWdtZW50Jyk7XG5cbi8qKlxuICogTWF0ZXJpYWwgZm9yIHBhcnRpY2xlcy5cbiAqL1xuY2xhc3MgUGFydGljbGVzTWF0ZXJpYWxcbntcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIHBhcnRpY2xlcyBtYXRlcmlhbC5cbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMgTWF0ZXJpYWwgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5jb2xvciBNYXRlcmlhbCBnZW5lcmFsIGNvbG9yLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy50cmFuc3BhcmVudCBTaG91bGQgd2Ugc3VwcG9ydCB0cmFuc3BhcmVuY3k/XG4gICAgICogQHBhcmFtIHtUSFJFRS5CbGVuZGluZ30gb3B0aW9ucy5ibGVuZGluZyBCbGVuZGluZyBtb2RlLlxuICAgICAqIEBwYXJhbSB7VEhSRUUuVGV4dHVyZX0gb3B0aW9ucy5tYXAgVGV4dHVyZSB0byB1c2UuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLnBlcnNwZWN0aXZlIElmIHRydWUsIHdpbGwgc2NhbGUgcGFydGljbGVzIGJhc2VkIG9uIGRpc3RhbmNlIGZyb20gY2FtZXJhLlxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5wZXJQYXJ0aWNsZUNvbG9yIElmIHRydWUsIHdpbGwgYWxsb3cgcGVyLXBhcnRpY2xlIGNvbG9ycy5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMucGVyUGFydGljbGVSb3RhdGlvbiBJZiB0cnVlLCB3aWxsIGFsbG93IHBlci1wYXJ0aWNsZSByb3RhdGlvbi5cbiAgICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5jb25zdFNpemUgSWYgZXhpc3QsIHdpbGwgc2V0IGNvbnN0IHNpemUgdG8gYWxsIHBhcnRpY2xlcy5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuYWxwaGFUZXN0IElmIHRydWUsIHdpbGwgcGVyZm9ybSBhbHBoYSB0ZXN0IGFuZCBkaXNjYXJkIHRyYW5zcGFyZW50IHBpeGVscy5cbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuZGVwdGhXcml0ZSBJZiB0cnVlLCB3aWxsIHBlcmZvcm0gZGVwdGggd3JpdGUuXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLmRlcHRoVGVzdCBJZiB0cnVlLCB3aWxsIHBlcmZvcm0gZGVwdGggdGVzdC5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKVxuICAgIHtcbiAgICAgICAgLy8gc3RvcmUgb3B0aW9uc1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgICAgIC8vIHVuaWZvcm1zXG4gICAgICAgIHZhciB1bmlmb3JtcyA9IHtcbiAgICAgICAgICAgIGdsb2JhbENvbG9yOiB7IHZhbHVlOiBuZXcgVEhSRUUuQ29sb3IoIG9wdGlvbnMuY29sb3IgfHwgMHhmZmZmZmYgKSB9LFxuICAgICAgICAgICAgcmVuZGVyZXJTY2FsZTogeyB2YWx1ZTogMSB9LFxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHNldCBmbGFncyB0byBjaGFuZ2Ugc2hhZGVycyBiZWhhdmlvclxuICAgICAgICB2YXIgZmxhZ3MgPSBcIlwiO1xuICAgICAgICBpZiAob3B0aW9ucy5wZXJzcGVjdGl2ZSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gXCIjZGVmaW5lIFBFUlNQRUNUSVZFXFxuXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMubWFwKSB7XG4gICAgICAgICAgICBmbGFncyArPSBcIiNkZWZpbmUgVEVYVFVSRVxcblwiO1xuICAgICAgICAgICAgdW5pZm9ybXMuX3RleHR1cmUgPSB7IHZhbHVlOiBvcHRpb25zLm1hcCB9O1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnBlclBhcnRpY2xlQ29sb3IpIHtcbiAgICAgICAgICAgIGZsYWdzICs9IFwiI2RlZmluZSBDT0xPUklOR1xcblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLnBlclBhcnRpY2xlUm90YXRpb24pIHtcbiAgICAgICAgICAgIGZsYWdzICs9IFwiI2RlZmluZSBST1RBVElPTlxcblwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmNvbnN0U2l6ZSkge1xuICAgICAgICAgICAgZmxhZ3MgKz0gXCIjZGVmaW5lIENPTlNUX1NJWkVcXG5cIjtcbiAgICAgICAgICAgIHVuaWZvcm1zLmNvbnN0U2l6ZSA9IHsgdmFsdWU6IG9wdGlvbnMuY29uc3RTaXplIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuYWxwaGFUZXN0KSB7XG4gICAgICAgICAgICBmbGFncyArPSBcIiNkZWZpbmUgQUxQSEFfVEVTVFxcblwiO1xuICAgICAgICB9XG4gICAgICAgIGZsYWdzICs9IFwiXFxuXCI7XG5cbiAgICAgICAgLy8gY3JlYXRlIHRoZSBpbnRlcm5hbCBtYXRlcmlhbFxuICAgICAgICB2YXIgc2hhZGVyTWF0ZXJpYWwgPSBuZXcgVEhSRUUuU2hhZGVyTWF0ZXJpYWwoe1xuICAgICAgICAgICAgdW5pZm9ybXM6ICAgICAgIHVuaWZvcm1zLFxuICAgICAgICAgICAgdmVydGV4U2hhZGVyOiAgIGZsYWdzICsgVmVydGV4U2hhZGVyQ29kZSxcbiAgICAgICAgICAgIGZyYWdtZW50U2hhZGVyOiBmbGFncyArIEZyYWdtZW50U2hhZGVyQ29kZSxcbiAgICAgICAgICAgIHRyYW5zcGFyZW50OiAgICBCb29sZWFuKG9wdGlvbnMudHJhbnNwYXJlbnQpLFxuICAgICAgICAgICAgYmxlbmRpbmc6ICAgICAgIG9wdGlvbnMuYmxlbmRpbmcsXG4gICAgICAgICAgICB2ZXJ0ZXhDb2xvcnM6ICAgVEhSRUUuVmVydGV4Q29sb3JzLFxuICAgICAgICAgICAgZGVwdGhXcml0ZTogICAgIEJvb2xlYW4ob3B0aW9ucy5kZXB0aFdyaXRlKSxcbiAgICAgICAgICAgIGRlcHRoVGVzdDogICAgICBCb29sZWFuKG9wdGlvbnMuZGVwdGhUZXN0KSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwgPSBzaGFkZXJNYXRlcmlhbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaXNwb3NlIHRoZSBtYXRlcmlhbC5cbiAgICAgKi9cbiAgICBkaXNwb3NlKClcbiAgICB7XG4gICAgICAgIHRoaXMubWF0ZXJpYWwuZGlzcG9zZSgpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBTZXQgdW5pZmllZCBzY2FsZSBmb3IgYWxsIHBhcnRpY2xlcy5cbiAgICAgKi9cbiAgICBzZXRCYXNlU2NhbGUodmFsKVxuICAgIHtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5wZXJzcGVjdGl2ZSkge1xuICAgICAgICAgICAgdGhpcy5tYXRlcmlhbC51bmlmb3Jtcy5yZW5kZXJlclNjYWxlLnZhbHVlID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRpY2xlc01hdGVyaWFsOyIsIi8qKlxuICogRGVmaW5lIGludGVyZmFjZSBmb3IgYSBoZWxwZXIgY2xhc3MgdG8gZ2VuZXJhdGUgcmFuZG9tIHZlY3RvcnMgYW5kIGNvbG9ycy5cbiAqIEF1dGhvcjogUm9uZW4gTmVzcy5cbiAqIFNpbmNlOiAyMDE5LlxuICovXG5cbi8qKlxuICogQmFzZSBjbGFzcyBmb3IgYWxsIHZlY3RvciByYW5kb21pemVycy5cbiAqL1xuY2xhc3MgUmFuZG9taXplciB7XG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhbmQgcmV0dXJuIGEgcmFuZG9tIHZhbHVlLlxuICAgKiBUaGlzIGlzIHRoZSBtYWluIG1ldGhvZCB0byBpbXBsZW1lbnQuXG4gICAqL1xuICBnZW5lcmF0ZSgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJOb3QgaW1wbGVtZW50ZWQuXCIpO1xuICB9XG59XG5cbi8vIGV4cG9ydCB0aGUgYmFzZSBjbGFzc1xubW9kdWxlLmV4cG9ydHMgPSBSYW5kb21pemVyO1xuIiwiLyoqXG4gKiBHZW5lcmF0ZSB2ZWN0b3JzIHdpdGhpbiBhIDNkIGJveC5cbiAqIEF1dGhvcjogUm9uZW4gTmVzcy5cbiAqIFNpbmNlOiAyMDE5LlxuICovXG5jb25zdCBUSFJFRSA9IHJlcXVpcmUoXCJ0aHJlZVwiKTtcbmNvbnN0IFJhbmRvbWl6ZXIgPSByZXF1aXJlKFwiLi9yYW5kb21pemVyXCIpO1xuY29uc3QgVXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbi8qKlxuICogQm94IHZlY3RvciByYW5kb21pemVyLlxuICovXG5jbGFzcyBCb3hSYW5kb21pemVyIGV4dGVuZHMgUmFuZG9taXplciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIGJveCByYW5kb21pemVyIGZyb20gbWluIGFuZCBtYXggdmVjdG9ycyB0byByYW5kb21pemUgYmV0d2Vlbi5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG1pbiwgbWF4KSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLm1pbiA9IG1pbiB8fCBuZXcgVEhSRUUuVmVjdG9yMygtMSwgLTEsIC0xKTtcbiAgICB0aGlzLm1heCA9IG1heCB8fCBuZXcgVEhSRUUuVmVjdG9yMygxLCAxLCAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHJhbmRvbSB2ZWN0b3IuXG4gICAqL1xuICBnZW5lcmF0ZSh0YXJnZXQpIHtcbiAgICByZXR1cm4gVXRpbHMuZ2V0UmFuZG9tVmVjdG9yQmV0d2Vlbih0aGlzLm1pbiwgdGhpcy5tYXgsIHRhcmdldCk7XG4gIH1cbn1cblxuLy8gZXhwb3J0IHRoZSByYW5kb21pemVyIGNsYXNzXG5tb2R1bGUuZXhwb3J0cyA9IEJveFJhbmRvbWl6ZXI7XG4iLCIvKipcbiAqIEdlbmVyYXRlIHZlY3RvcnMgd2l0aGluIGEgM2Qgc3BoZXJlLlxuICogQXV0aG9yOiBSb25lbiBOZXNzLlxuICogU2luY2U6IDIwMTkuXG4gKi9cbmNvbnN0IFRIUkVFID0gcmVxdWlyZShcInRocmVlXCIpO1xuY29uc3QgUmFuZG9taXplciA9IHJlcXVpcmUoXCIuL3JhbmRvbWl6ZXJcIik7XG5jb25zdCBVdGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxuY29uc3QgTUlOX1ZFQyA9IG5ldyBUSFJFRS5WZWN0b3IzKC0xLCAtMSwgLTEpO1xuY29uc3QgTUFYX1ZFQyA9IG5ldyBUSFJFRS5WZWN0b3IzKDEsIDEsIDEpO1xuXG4vLyByYW5kb20gYmV0d2VlbiAtMSBhbmQgMS5cbmZ1bmN0aW9uIHJhbmRNaW51c1RvT25lKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKSAqIDIgLSAxO1xufVxuXG4vKipcbiAqIFNwaGVyZSB2ZWN0b3IgcmFuZG9taXplci5cbiAqL1xuY2xhc3MgU3BoZXJlUmFuZG9taXplciBleHRlbmRzIFJhbmRvbWl6ZXIge1xuICAvKipcbiAgICogQ3JlYXRlIHRoZSBzcGhlcmUgcmFuZG9taXplciBmcm9tIHJhZGl1cyBhbmQgb3B0aW9uYWwgc2NhbGVyLlxuICAgKi9cbiAgY29uc3RydWN0b3IobWF4UmFkaXVzLCBtaW5SYWRpdXMsIHNjYWxlciwgbWluVmVjdG9yLCBtYXhWZWN0b3IpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubWF4UmFkaXVzID0gbWF4UmFkaXVzIHx8IDE7XG4gICAgdGhpcy5taW5SYWRpdXMgPSBtaW5SYWRpdXMgfHwgMDtcbiAgICB0aGlzLnNjYWxlciA9IHNjYWxlcjtcbiAgICB0aGlzLm1pblZlY3RvciA9IG1pblZlY3RvcjtcbiAgICB0aGlzLm1heFZlY3RvciA9IG1heFZlY3RvcjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHJhbmRvbSB2ZWN0b3IuXG4gICAqL1xuICBnZW5lcmF0ZSh0YXJnZXQpIHtcbiAgICB0YXJnZXQgPSB0YXJnZXQgfHwgbmV3IFRIUkVFLlZlY3RvcjMoKTtcblxuICAgIC8vIGNyZWF0ZSByYW5kb20gdmVjdG9yXG4gICAgdGFyZ2V0LnNldChyYW5kTWludXNUb09uZSgpLCByYW5kTWludXNUb09uZSgpLCByYW5kTWludXNUb09uZSgpKTtcblxuICAgIC8vIGNsYW1wIHZhbHVlc1xuICAgIGlmICh0aGlzLm1pblZlY3RvciB8fCB0aGlzLm1heFZlY3Rvcikge1xuICAgICAgdGFyZ2V0LmNsYW1wKHRoaXMubWluVmVjdG9yIHx8IE1JTl9WRUMsIHRoaXMubWF4VmVjdG9yIHx8IE1BWF9WRUMpO1xuICAgIH1cblxuICAgIC8vIG5vcm1hbGl6ZSBhbmQgbXVsdGlwbHkgYnkgcmFkaXVzXG4gICAgdGFyZ2V0Lm5vcm1hbGl6ZSgpLm11bHRpcGx5U2NhbGFyKFV0aWxzLmdldFJhbmRvbUJldHdlZW4odGhpcy5taW5SYWRpdXMsIHRoaXMubWF4UmFkaXVzKSk7XG5cbiAgICAvLyBhcHBseSBzY2FsZXJcbiAgICBpZiAodGhpcy5zY2FsZXIpIHtcbiAgICAgIHRhcmdldC5tdWx0aXBseSh0aGlzLnNjYWxlcik7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH1cbn1cblxuLy8gZXhwb3J0IHRoZSByYW5kb21pemVyIGNsYXNzXG5tb2R1bGUuZXhwb3J0cyA9IFNwaGVyZVJhbmRvbWl6ZXI7XG4iLCIvKipcbiAqIEdlbmVyYXRlIHZlY3RvcnMgd2l0aGluIGEgM2QgYm94LlxuICogQXV0aG9yOiBSb25lbiBOZXNzLlxuICogU2luY2U6IDIwMTkuXG4gKi9cbmNvbnN0IFRIUkVFID0gcmVxdWlyZShcInRocmVlXCIpO1xuY29uc3QgUmFuZG9taXplciA9IHJlcXVpcmUoXCIuL3JhbmRvbWl6ZXJcIik7XG5jb25zdCBVdGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxuLyoqXG4gKiBCb3ggdmVjdG9yIHJhbmRvbWl6ZXIuXG4gKi9cbmNsYXNzIENvbG9yc1JhbmRvbWl6ZXIgZXh0ZW5kcyBSYW5kb21pemVyIHtcbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYm94IHJhbmRvbWl6ZXIgZnJvbSBtaW4gYW5kIG1heCBjb2xvcnMgdG8gcmFuZG9taXplIGJldHdlZW4uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihtaW4sIG1heCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5taW4gPSBtaW4gfHwgbmV3IFRIUkVFLkNvbG9yKDAsIDAsIDApO1xuICAgIHRoaXMubWF4ID0gbWF4IHx8IG5ldyBUSFJFRS5Db2xvcigxLCAxLCAxKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHJhbmRvbSBjb2xvci5cbiAgICovXG4gIGdlbmVyYXRlKHRhcmdldCkge1xuICAgIHJldHVybiBVdGlscy5nZXRSYW5kb21Db2xvckJldHdlZW4odGhpcy5taW4sIHRoaXMubWF4LCB0YXJnZXQpO1xuICB9XG59XG5cbi8vIGV4cG9ydCB0aGUgcmFuZG9taXplciBjbGFzc1xubW9kdWxlLmV4cG9ydHMgPSBDb2xvcnNSYW5kb21pemVyO1xuIiwiLyoqXG4gKiBHZW5lcmF0ZSBudW1iZXJzIGJldHdlZW4gbWluIGFuZCBtYXguXG4gKiBBdXRob3I6IFJvbmVuIE5lc3MuXG4gKiBTaW5jZTogMjAxOS5cbiAqL1xuY29uc3QgUmFuZG9taXplciA9IHJlcXVpcmUoXCIuL3JhbmRvbWl6ZXJcIik7XG5jb25zdCBVdGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxuLyoqXG4gKiBNaW4tTWF4IG51bWJlciByYW5kb21pemVyLlxuICovXG5jbGFzcyBNaW5NYXhSYW5kb21pemVyIGV4dGVuZHMgUmFuZG9taXplciB7XG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIG1pbi1tYXggcmFuZG9taXplciBmcm9tIG1pbiBhbmQgbWF4LlxuICAgKi9cbiAgY29uc3RydWN0b3IobWluLCBtYXgpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubWluID0gbWluO1xuICAgIHRoaXMubWF4ID0gbWF4O1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlIGEgcmFuZG9tIG51bWJlci5cbiAgICovXG4gIGdlbmVyYXRlKCkge1xuICAgIHJldHVybiBVdGlscy5nZXRSYW5kb21CZXR3ZWVuKHRoaXMubWluLCB0aGlzLm1heCk7XG4gIH1cbn1cblxuLy8gZXhwb3J0IHRoZSByYW5kb21pemVyIGNsYXNzXG5tb2R1bGUuZXhwb3J0cyA9IE1pbk1heFJhbmRvbWl6ZXI7XG4iLCIvKipcbiAqIE1vZHVsZSBtYWluIGVudHJ5IHBvaW50LlxuICogQXV0aG9yOiBSb25lbiBOZXNzLlxuICogU2luY2U6IDIwMTkuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUmFuZG9taXplcjogcmVxdWlyZSgnLi9yYW5kb21pemVyJyksXG4gICAgQm94UmFuZG9taXplcjogcmVxdWlyZSgnLi9ib3hfcmFuZG9taXplcicpLFxuICAgIFNwaGVyZVJhbmRvbWl6ZXI6IHJlcXVpcmUoJy4vc3BoZXJlX3JhbmRvbWl6ZXInKSxcbiAgICBDb2xvcnNSYW5kb21pemVyOiByZXF1aXJlKCcuL2NvbG9yc19yYW5kb21pemVyJyksXG4gICAgTWluTWF4UmFuZG9taXplcjogcmVxdWlyZSgnLi9taW5tYXhfcmFuZG9taXplcicpLFxufSIsIi8qKlxuICogSW1wbGVtZW50IGFuIGVtaXR0ZXIgY2xhc3MgdG8gZ2VuZXJhdGUgcGFydGljbGVzLlxuICogQXV0aG9yOiBSb25lbiBOZXNzLlxuICogU2luY2U6IDIwMTkuXG4qL1xuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5jb25zdCByYW5kb21pemVyT3JWYWx1ZSA9IFV0aWxzLnJhbmRvbWl6ZXJPclZhbHVlO1xuXG4vKipcbiAqIEVtaXR0ZXIgY2xhc3MgdG8gZGV0ZXJtaW5lIHJhdGUgb2YgcGFydGljbGVzIGdlbmVyYXRpb24uXG4gKi9cbmNsYXNzIEVtaXR0ZXJcbntcbiAgICAvKipcbiAgICAgKiBDcmVhdGUgdGhlIGVtaXR0ZXIgY2xhc3MuXG4gICAgICogQHBhcmFtIHsqfSBvcHRpb25zIEVtaXR0ZXIgb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0geyp9IG9wdGlvbnMub25TcGF3bkJ1cnN0IEJ1cnN0IG9mIHBhcnRpY2xlcyB3aGVuIHBhcnRpY2xlIHN5c3RlbSBzdGFydHM7IGVpdGhlciBhIGNvbnN0YW50IHZhbHVlIChOdW1iZXIpIG9yIGEgUGFydHlrYWxzLlJhbmRvbWl6ZXJzLlJhbmRvbWl6ZXIgaW5zdGFuY2UgdG8gY3JlYXRlIHJhbmRvbSBudW1iZXJzLlxuICAgICAqIEBwYXJhbSB7Kn0gb3B0aW9ucy5vbkludGVydmFsIEJ1cnN0IG9mIHBhcnRpY2xlcyBldmVyeSBpbnRlcnZhbDsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKE51bWJlcikgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIG51bWJlcnMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuaW50ZXJ2YWwgU3Bhd24gaW50ZXJ2YWwgdGltZSwgaW4gc2Vjb25kczsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKE51bWJlcikgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIG51bWJlcnMuXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuZGV0b3JldGluZ01pblR0bCBJZiBwcm92aWRlZCBhbmQgcGFydGljbGUgc3lzdGVtJ3MgdHRsIGlzIGJlbG93IHRoaXMgdmFsdWUsIHdpbGwgc3RhcnQgZW1pdHRpbmcgbGVzcyBhbmQgbGVzcyB1bnRpbCBzdG9wcGluZyBjb21wbGV0ZWx5LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpXG4gICAge1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgICBvcHRpb25zLmludGVydmFsID0gb3B0aW9ucy5pbnRlcnZhbCB8fCAxO1xuICAgICAgICB0aGlzLmFnZSA9IDA7XG4gICAgICAgIHRoaXMudGltZVRvU3Bhd24gPSBNYXRoLnJhbmRvbSgpICogcmFuZG9taXplck9yVmFsdWUob3B0aW9ucy5pbnRlcnZhbCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGVtaXR0ZXIgYW5kIHJldHVybiBob3cgbWFueSBwYXJ0aWNsZXMgc2hvdWxkIGJlIGdlbmVyYXRlZCB0aGlzIGZyYW1lLlxuICAgICAqL1xuICAgIHVwZGF0ZShkZWx0YVRpbWUsIHN5c3RlbSlcbiAgICB7XG4gICAgICAgIC8vIHBhcnRpY2xlcyB0byBnZW5lcmF0ZVxuICAgICAgICBsZXQgcmV0ID0gMDtcblxuICAgICAgICAvLyBmaXJzdCB1cGRhdGU/IGRvIGJ1cnN0XG4gICAgICAgIGlmICh0aGlzLmFnZSA9PT0gMCAmJiB0aGlzLm9wdGlvbnMub25TcGF3bkJ1cnN0KSB7XG4gICAgICAgICAgICByZXQgKz0gcmFuZG9taXplck9yVmFsdWUodGhpcy5vcHRpb25zLm9uU3Bhd25CdXJzdCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIHVwZGF0ZSBhZ2VcbiAgICAgICAgdGhpcy5hZ2UgKz0gZGVsdGFUaW1lO1xuXG4gICAgICAgIC8vIG5vIGludGVydmFsIGVtaXR0aW5nPyBza2lwXG4gICAgICAgIGlmICghdGhpcy5vcHRpb25zLm9uSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBpZiBpbnZlcnZhbCBleHBpcmVkXG4gICAgICAgIHRoaXMudGltZVRvU3Bhd24gLT0gZGVsdGFUaW1lO1xuICAgICAgICBpZiAodGhpcy50aW1lVG9TcGF3biA8PSAwKSB7XG4gICAgICAgICAgICB0aGlzLnRpbWVUb1NwYXduID0gcmFuZG9taXplck9yVmFsdWUodGhpcy5vcHRpb25zLmludGVydmFsKTtcbiAgICAgICAgICAgIHJldCArPSByYW5kb21pemVyT3JWYWx1ZSh0aGlzLm9wdGlvbnMub25JbnRlcnZhbCk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkbyBkZXRvcmF0aW9uXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMuZGV0b3JldGluZ01pblR0bCAmJiBzeXN0ZW0udHRsIDwgdGhpcy5vcHRpb25zLmRldG9yZXRpbmdNaW5UdGwpIHtcbiAgICAgICAgICAgIHZhciBkZXRvcmF0ZUZhY3RvciA9IHN5c3RlbS50dGwgLyB0aGlzLm9wdGlvbnMuZGV0b3JldGluZ01pblR0bDtcbiAgICAgICAgICAgIHJldCAqPSBkZXRvcmF0ZUZhY3RvcjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHJldHVybiBudW1iZXIgb2YgcGFydGljbGVzIHRvIGdlbmVyYXRlXG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxufVxuXG4vLyBleHBvcnQgdGhlIGVtaXR0ZXIgY2xhc3Ncbm1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjsiLCIvKipcbiAqIEltcGxlbWVudCBiYXNpYyBwYXJ0aWNsZXMgc3lzdGVtLlxuICogQXV0aG9yOiBSb25lbiBOZXNzLlxuICogU2luY2U6IDIwMTkuXG4gKi9cbmNvbnN0IFRIUkVFID0gcmVxdWlyZShcInRocmVlXCIpO1xuY29uc3QgUGFydGljbGUgPSByZXF1aXJlKFwiLi9wYXJ0aWNsZVwiKTtcbmNvbnN0IFBhcnRpY2xlc01hdGVyaWFsID0gcmVxdWlyZShcIi4vbWF0ZXJpYWwvbWF0ZXJpYWxcIik7XG5cbmNvbnN0IFJhbmRvbWl6ZXJzID0gcmVxdWlyZShcIi4vcmFuZG9taXplcnNcIik7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcIi4vZW1pdHRlclwiKTtcblxuY29uc3QgTlVMTF9BUlJBWSA9IFtdO1xuXG5jb25zdCBCTEVORElOR19PUFRJT05TID0ge1xuICBvcGFxdWU6IFRIUkVFLk5vQmxlbmRpbmcsXG4gIGFkZGl0aXZlOiBUSFJFRS5BZGRpdGl2ZUJsZW5kaW5nLFxuICBtdWx0aXBseTogVEhSRUUuTXVsdGlwbHlCbGVuZGluZyxcbiAgYmxlbmQ6IFRIUkVFLk5vcm1hbEJsZW5kaW5nXG59O1xuXG4vLyB0byBjaGVjayBpZiB2YWx1ZSBpcyBkZWZpbmVkXG5mdW5jdGlvbiBkZWZpbmVkKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB1bmRlZmluZWQgJiYgdmFsICE9PSBudWxsO1xufVxuXG4vKipcbiAqIGRlZXAtY29waWVzIHRoZSBzZXR0aW5ncyxcbiAqIGFuZCByZXBsYWNlcyB0aGUgb2JqZWN0cyB0aGF0IGhhdmUgYSBcIm1vZHVsZVR5cGVcIlxuICogdmFsdWUgd2l0aCB0aGUgYXBwcm9wcmlhdGUgY2xhc3MgZnJvbSBwYXJ0eWthbHMuXG4gKlxuICogYSBvYmplY3QsIHRoYXQgY2FuIGJlIHJlcGxhY2VkIG11c3QgbG9vayBsaWtlXG4gKiB7IG1vZHVsZVR5cGU6XCJlLmcuIENvbG9yc1JhbmRvbWl6ZXJcIiwgdmFsdWVzOltvcHRpb25hbCBwYXJhbWV0ZXJzXX1cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0XG4gKiBAcmV0dXJucyB0aGUgY29waWVkIG9iamVjdFxuICovXG5mdW5jdGlvbiBjb3B5RnJvbUpTT04ob2JqZWN0LCByZXNvdXJjZXMpIHtcbiAgaWYgKCFvYmplY3QpIHJldHVybiBvYmplY3Q7IC8vIGNhbiBlaXRoZXIgYmUgMCwgdW5kZWZpbmVkLCBudWxsLCBcIlwiIC0+IHdlIGRvIG5vdCBjYXJlIGFueXdheXNcblxuICBpZiAodHlwZW9mIG9iamVjdCAhPT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvYmplY3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdC5wdXNoKGNvcHlGcm9tSlNPTihvYmplY3RbaV0sIHJlc291cmNlcykpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaWYgb2JqZWN0LCBjcmVhdGUgYSBuZXcgb2JqZWN0IGFuZFxuICAvLyBjb3B5IGFsbCBzdWIgdmFsdWVzXG4gIGlmICghb2JqZWN0Lm1vZHVsZVR5cGUpIHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGxldCBrZXkgaW4gb2JqZWN0KSB7XG4gICAgICByZXN1bHRba2V5XSA9IGNvcHlGcm9tSlNPTihvYmplY3Rba2V5XSwgcmVzb3VyY2VzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGlmIChvYmplY3QubW9kdWxlVHlwZSA9PT0gXCJ0ZXh0dXJlXCIpIHtcbiAgICByZXR1cm4gcmVzb3VyY2VzW29iamVjdC5wYXJhbXNbMF1dO1xuICB9XG5cbiAgLy8gaWYgd2UgbmVlZCB0byBjb252ZXJ0IHRvIG9iamVjdFxuICBjb25zdCBDID0gVEhSRUVbb2JqZWN0Lm1vZHVsZVR5cGVdIHx8IFJhbmRvbWl6ZXJzW29iamVjdC5tb2R1bGVUeXBlXTtcbiAgcmV0dXJuIG5ldyBDKC4uLihvYmplY3QucGFyYW1zIHx8IE5VTExfQVJSQVkpKTtcbn1cblxuLyoqXG4gKiBQYXJ0aWNsZXMgc3lzdGVtLlxuICovXG5jbGFzcyBQYXJ0aWNsZXNTeXN0ZW0ge1xuICAvKipcbiAgICogQ3JlYXRlIHBhcnRpY2xlcyBzeXN0ZW0uXG4gICAqIEBwYXJhbSB7Kn0gb3B0aW9ucyBQYXJ0aWNsZXMgb3B0aW9ucy5cbiAgICogQHBhcmFtIHtUSFJFRS5PYmplY3QzRH0gb3B0aW9ucy5jb250YWluZXIgQ29udGFpbmVyIHRvIGFkZCBwYXJ0aWNsZXMgc3lzdGVtIHRvLlxuICAgKlxuICAgKiAvLyBQQVJUSUNMRVMgT1BUSU9OU1xuICAgKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gICAqIEBwYXJhbSB7Kn0gb3B0aW9ucy5wYXJ0aWNsZXMgUGFydGljbGUtcmVsYXRlZCBvcHRpb25zLlxuICAgKlxuICAgKiAvLyBQQVJUSUNMRVMgVFRMXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBhcnRpY2xlcy50dGwgSG93IGxvbmcsIGluIHNlY29uZHMsIGV2ZXJ5IHBhcnRpY2xlIGxpdmVzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5wYXJ0aWNsZXMudHRsRXh0cmEgSWYgcHJvdmlkZWQsIHdpbGwgYWRkIHJhbmRvbSBudW1iZXJzIGZyb20gMCB0byB0dGxFeHRyYSB0byBwYXJ0aWNsZSdzIHR0bC5cbiAgICpcbiAgICogLy8gUEFSVElDTEVTIEZBRElORyAvIEFMUEhBXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gb3B0aW9ucy5wYXJ0aWNsZXMuYWxwaGEgUGVyLXBhcnRpY2xlIGNvbnN0YW50IGFscGhhOyBlaXRoZXIgYSBjb25zdGFudCB2YWx1ZSAoTnVtYmVyKSBvciBhIFBhcnR5a2Fscy5SYW5kb21pemVycy5SYW5kb21pemVyIGluc3RhbmNlIHRvIGNyZWF0ZSByYW5kb20gdmFsdWVzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5wYXJ0aWNsZXMuc3RhcnRBbHBoYSBQYXJ0aWNsZXMgc3RhcnRpbmcgb3BhY2l0eTsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKE51bWJlcikgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIHZhbHVlcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFydGljbGVzLmVuZEFscGhhIFBhcnRpY2xlcyBlbmRpbmcgb3BhY2l0eTsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKE51bWJlcikgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIHZhbHVlcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFydGljbGVzLnN0YXJ0QWxwaGFDaGFuZ2VBdCBXaWxsIG9ubHkgc3RhcnQgc2hpZnRpbmcgYWxwaGEgd2hlbiBhZ2UgaXMgb3ZlciB0aGlzIHZhbHVlOyBlaXRoZXIgYSBjb25zdGFudCB2YWx1ZSAoTnVtYmVyKSBvciBhIFBhcnR5a2Fscy5SYW5kb21pemVycy5SYW5kb21pemVyIGluc3RhbmNlIHRvIGNyZWF0ZSByYW5kb20gdmFsdWVzLlxuICAgKlxuICAgKiAvLyBQQVJUSUNMRVMgR1JPV0lORyAvIFNJWkVcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFydGljbGVzLnNpemUgUGVyLXBhcnRpY2xlIGNvbnN0YW50IHNpemU7IGVpdGhlciBhIGNvbnN0YW50IHZhbHVlIChOdW1iZXIpIG9yIGEgUGFydHlrYWxzLlJhbmRvbWl6ZXJzLlJhbmRvbWl6ZXIgaW5zdGFuY2UgdG8gY3JlYXRlIHJhbmRvbSB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBhcnRpY2xlcy5zdGFydFNpemUgUGFydGljbGVzIHN0YXJ0aW5nIHNpemU7IGVpdGhlciBhIGNvbnN0YW50IHZhbHVlIChOdW1iZXIpIG9yIGEgUGFydHlrYWxzLlJhbmRvbWl6ZXJzLlJhbmRvbWl6ZXIgaW5zdGFuY2UgdG8gY3JlYXRlIHJhbmRvbSB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBhcnRpY2xlcy5lbmRTaXplIFBhcnRpY2xlcyBlbmRpbmcgc2l6ZTsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKE51bWJlcikgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIHZhbHVlcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFydGljbGVzLnN0YXJ0U2l6ZUNoYW5nZUF0IFdpbGwgb25seSBzdGFydCBzaGlmdGluZyBzaXplIHdoZW4gYWdlIGlzIG92ZXIgdGhpcyB2YWx1ZTsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKE51bWJlcikgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIHZhbHVlcy5cbiAgICpcbiAgICogLy8gUEFSVElDTEVTIENPTE9SSU5HXG4gICAqIEBwYXJhbSB7VEhSRUUuQ29sb3J9IG9wdGlvbnMucGFydGljbGVzLmNvbG9yIFBlci1wYXJ0aWNsZSBjb25zdGFudCBjb2xvcjsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKFRIUkVFLkNvbG9yKSBvciBhIFBhcnR5a2Fscy5SYW5kb21pemVycy5SYW5kb21pemVyIGluc3RhbmNlIHRvIGNyZWF0ZSByYW5kb20gdmFsdWVzLlxuICAgKiBAcGFyYW0ge1RIUkVFLkNvbG9yfSBvcHRpb25zLnBhcnRpY2xlcy5zdGFydENvbG9yIFN0YXJ0aW5nIGNvbG9yIG1pbiB2YWx1ZTsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKFRIUkVFLkNvbG9yKSBvciBhIFBhcnR5a2Fscy5SYW5kb21pemVycy5SYW5kb21pemVyIGluc3RhbmNlIHRvIGNyZWF0ZSByYW5kb20gdmFsdWVzLlxuICAgKiBAcGFyYW0ge1RIUkVFLkNvbG9yfSBvcHRpb25zLnBhcnRpY2xlcy5lbmRDb2xvciBFbmRpbmcgY29sb3IgbWluIHZhbHVlOyBlaXRoZXIgYSBjb25zdGFudCB2YWx1ZSAoVEhSRUUuQ29sb3IpIG9yIGEgUGFydHlrYWxzLlJhbmRvbWl6ZXJzLlJhbmRvbWl6ZXIgaW5zdGFuY2UgdG8gY3JlYXRlIHJhbmRvbSB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBhcnRpY2xlcy5zdGFydENvbG9yQ2hhbmdlQXQgV2lsbCBvbmx5IHN0YXJ0IHNoaWZ0aW5nIGNvbG9yIHdoZW4gYWdlIGlzIG92ZXIgdGhpcyB2YWx1ZTsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKE51bWJlcikgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIHZhbHVlcy5cbiAgICpcbiAgICogLy8gUEFSVElDTEVTIEFDQ0VMRVJBVElPTlxuICAgKiBAcGFyYW0ge1RIUkVFLlZlY3RvcjN9IG9wdGlvbnMucGFydGljbGVzLmFjY2VsZXJhdGlvbiBQYXJ0aWNsZXMgYWNjZWxlcmF0aW9uOyBlaXRoZXIgYSBjb25zdGFudCB2YWx1ZSAoVEhSRUUuVmVjdG9yMykgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIHZhbHVlcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFydGljbGVzLmdyYXZpdHkgR3Jhdml0eSBmb3JjZSBhZmZlY3RpbmcgdGhlIHBhcnRpY2xlcy5cbiAgICpcbiAgICogLy8gUEFSVElDTEVTIFJPVEFUSU9OXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvcHRpb25zLnBhcnRpY2xlcy5yb3RhdGlvbiBQZXItcGFydGljbGUgcm90YXRpb24gKG9ubHkgd29ya3Mgd2l0aCB0ZXh0dXJlKTsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKE51bWJlcikgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIHZhbHVlcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFydGljbGVzLnJvdGF0aW9uU3BlZWQgUGFydGljbGVzIHJvdGF0aW9uIHNwZWVkIChvbmx5IHdvcmtzIHdpdGggdGV4dHVyZSk7IGVpdGhlciBhIGNvbnN0YW50IHZhbHVlIChOdW1iZXIpIG9yIGEgUGFydHlrYWxzLlJhbmRvbWl6ZXJzLlJhbmRvbWl6ZXIgaW5zdGFuY2UgdG8gY3JlYXRlIHJhbmRvbSB2YWx1ZXMuXG4gICAqXG4gICAqIC8vIFBBUlRJQ0xFUyBWRUxPQ0lUWVxuICAgKiBAcGFyYW0geyp9IG9wdGlvbnMucGFydGljbGVzLnZlbG9jaXR5IFBhcnRpY2xlcyBzdGFydGluZyB2ZWxvY2l0eTsgZWl0aGVyIGEgY29uc3RhbnQgdmFsdWUgKFRIUkVFLlZlY3RvcjMpIG9yIGEgUGFydHlrYWxzLlJhbmRvbWl6ZXJzLlJhbmRvbWl6ZXIgaW5zdGFuY2UgdG8gY3JlYXRlIHJhbmRvbSB2YWx1ZXMuXG4gICAqIEBwYXJhbSB7VEhSRUUuVmVjdG9yM30gb3B0aW9ucy5wYXJ0aWNsZXMudmVsb2NpdHlCb251cyBWZWxvY2l0eSB2YWx1ZSB0byBhZGQgdG8gYWxsIHBhcnRpY2xlcyBhZnRlciByYW5kb21pemluZyB2ZWxvY2l0eS5cbiAgICpcbiAgICogLy8gUEFSVElDTEVTIE9GRlNFVFxuICAgKiBAcGFyYW0ge1RIUkVFLlZlY3RvcjN9IG9wdGlvbnMucGFydGljbGVzLm9mZnNldCBQYXJ0aWNsZXMgb2Zmc2V0IGZyb20gc3lzdGVtJ3MgY2VudGVyOyBlaXRoZXIgYSBjb25zdGFudCB2YWx1ZSAoVEhSRUUuVmVjdG9yMykgb3IgYSBQYXJ0eWthbHMuUmFuZG9taXplcnMuUmFuZG9taXplciBpbnN0YW5jZSB0byBjcmVhdGUgcmFuZG9tIHZhbHVlcy5cbiAgICpcbiAgICogLy8gUEFSVElDTEUgR0xPQkFMU1xuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMucGFydGljbGVzLndvcmxkUG9zaXRpb24gSWYgdHJ1ZSwgcGFydGljbGVzIHdpbGwgbWFpbnRhaW4gdGhlaXIgd29ybGQgcG9zaXRpb24gYWZ0ZXIgc3Bhd24gZXZlbiBpZiB0aGUgc3lzdGVtIG1vdmVzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5wYXJ0aWNsZXMuZ2xvYmFsU2l6ZSBDb25zdCBzaXplIGZvciBhbGwgcGFydGljbGVzLiBOb3RlOiB0aGlzIGlzIG1vcmUgZWZmaWNpZW50IHRoYW4gc2V0dGluZyBwZXItcGFydGljbGUgc2l6ZSBwcm9wZXJ0eS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMucGFydGljbGVzLmdsb2JhbENvbG9yIEdsb2JhbCBjb2xvciB0byBhZmZlY3QgYWxsIHBhcnRpY2xlcy4gTm90ZTogdGhpcyBpcyBtb3JlIGVmZmljaWVudCB0aGFuIHNldHRpbmcgcGVyLXBhcnRpY2xlIGNvbG9yIHByb3BlcnR5LlxuICAgKiBAcGFyYW0ge1N0cmluZ30gb3B0aW9ucy5wYXJ0aWNsZXMuYmxlbmRpbmcgUGFydGljbGVzIGJsZW5kaW5nIG1vZGUgKG9wYXF1ZSAvIGJsZW5kIC8gYWRkaXRpdmUpLlxuICAgKiBAcGFyYW0ge1RIUkVFLlRleHR1cmV9IG9wdGlvbnMucGFydGljbGVzLnRleHR1cmUgUGFydGljbGUncyB0ZXh0dXJlIHRvIHVzZS5cbiAgICpcbiAgICogLy8gQ1VTVE9NIENBTExCQUNLU1xuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnBhcnRpY2xlcy5vblVwZGF0ZSBPcHRpb25hbCBtZXRob2QgdG8gY2FsbCBwZXItcGFydGljbGUgZXZlcnkgdXBkYXRlIGZyYW1lLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnBhcnRpY2xlcy5vblNwYXduIE9wdGlvbmFsIG1ldGhvZCB0byBjYWxsIHBlci1wYXJ0aWNsZSBldmVyeSB0aW1lIGEgcGFydGljbGUgc3Bhd25zIChhZnRlciBldmVyeXRoaW5nIGlzIHNldCkuXG4gICAqXG4gICAqIC8vIFNZU1RFTSBPUFRJT05TXG4gICAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAgICogQHBhcmFtIHsqfSBvcHRpb25zLnN5c3RlbSBTeXN0ZW0tcmVsYXRlZCBvcHRpb25zLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5zeXN0ZW0ucGFydGljbGVzQ291bnQgUGFydGljbGVzIGNvdW50LlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5zeXN0ZW0udHRsIEhvdyBsb25nLCBpbiBzZWNvbmRzLCB0aGUgcGFydGljbGUgc3lzdGVtIGxpdmVzLlxuICAgKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5zeXN0ZW0uc3BlZWQgU3BlZWQgZmFjdG9yIHRvIGFmZmVjdCBhbGwgcGFydGljbGVzIGFuZCBlbWl0dGluZy4gTm90ZTogdGhlIG9ubHkgdGhpbmcgdGhpcyBkb24ndCBhZmZlY3QgaXMgc3lzdGVtJ3MgdHRsLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBvcHRpb25zLnN5c3RlbS5vblVwZGF0ZSBPcHRpb25hbCBtZXRob2QgdG8gY2FsbCBldmVyeSB1cGRhdGUgZnJhbWUuXG4gICAqIEBwYXJhbSB7UGFydHlrYWxzLkVtaXR0ZXJ9IG9wdGlvbnMuc3lzdGVtLmVtaXR0ZXJzIEEgc2luZ2xlIGVtaXR0ZXIgb3IgYSBsaXN0IG9mIGVtaXR0ZXJzIHRvIGF0dGFjaCB0byB0aGlzIHN5c3RlbS5cbiAgICogQHBhcmFtIHtCb29sZWFufSBvcHRpb25zLnN5c3RlbS5wZXJzcGVjdGl2ZSBJZiB0cnVlLCB3aWxsIHNjYWxlIHBhcnRpY2xlcyBiYXNlZCBvbiBkaXN0YW5jZSBmcm9tIGNhbWVyYS5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IG9wdGlvbnMuc3lzdGVtLnNjYWxlIE92ZXJhbGwgc3lzdGVtIHNjYWxlIHdoZW4gaW4gcGVyc3BlY3RpdmUgbW9kZSAoaWYgcGVyc3BlY3RpdmU9ZmFsc2UsIHdpbGwgYmUgaWdub3JlZCkuIEEgZ29vZCB2YWx1ZSBpcyBiZXR3ZWVuIDQwMCBhbmQgNjAwLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuc3lzdGVtLmRlcHRoV3JpdGUgU2hvdWxkIHdlIHBlcmZvcm0gZGVwdGggd3JpdGU/IChkZWZhdWx0IHRvIHRydWUpLlxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IG9wdGlvbnMuc3lzdGVtLmRlcHRoVGVzdCBTaG91bGQgd2UgcGVyZm9ybSBkZXB0aCB0ZXN0PyAoZGVmYXVsdCB0byB0cnVlKS5cbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAvLyB1c2UgYmluZE9iamVjdCwgdG8gc2V0IHRoZXNlIHZhbHVlc1xuICAgIC8vIHRoZW4gcGFydGljbGUgc3lzdGVtIGZvbGxvd3MgdGhlIHBhc3NlZCBvYmplY3RcbiAgICB0aGlzLmJvdW5kT2JqZWN0ID0gbnVsbDtcbiAgICB0aGlzLmxvY2tCb3VuZFJvdGF0aW9uID0gdHJ1ZTtcblxuICAgIC8vIHN0b3JlIG9wdGlvbnNcbiAgICBvcHRpb25zLnBhcnRpY2xlcyA9IG9wdGlvbnMucGFydGljbGVzIHx8IHsgd29ybGRQb3NpdGlvbjogdHJ1ZSB9O1xuICAgIG9wdGlvbnMuc3lzdGVtID0gb3B0aW9ucy5zeXN0ZW0gfHwge307XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcblxuICAgIC8vIGdldCBwYXJ0aWNsZSBvcHRpb25zXG4gICAgY29uc3QgcE9wdGlvbnMgPSBvcHRpb25zLnBhcnRpY2xlcztcblxuICAgIC8vIGRvIHNvbWUgaW50ZXJuYWwgY2hlYXRpbmcgdG8gcmVwbGFjZSBjb25zdCBzaXplIHdpdGggZ2xvYmFsIHNpemVcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMucGFydGljbGVzLnNpemUgPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgXCJOb3RlOiByZXBsYWNlZCAnc2l6ZScgd2l0aCAnZ2xvYmFsU2l6ZScgcHJvcGVydHkgc2luY2UgaXRzIG1vcmUgZWZmaWNpZW50IGFuZCBwcm92aWRlZCBzaXplIHZhbHVlIHdhcyBjb25zdGFudCBhbnl3YXkuXCJcbiAgICAgICk7XG4gICAgICBvcHRpb25zLnBhcnRpY2xlcy5nbG9iYWxTaXplID0gb3B0aW9ucy5wYXJ0aWNsZXMuc2l6ZTtcbiAgICAgIGRlbGV0ZSBvcHRpb25zLnBhcnRpY2xlcy5zaXplO1xuICAgIH1cblxuICAgIC8vIGRvIHNvbWUgaW50ZXJuYWwgY2hlYXRpbmcgdG8gcmVwbGFjZSBjb25zdCBjb2xvciB3aXRoIGdsb2JhbCBjb2xvclxuICAgIGlmIChvcHRpb25zLnBhcnRpY2xlcy5jb2xvciBpbnN0YW5jZW9mIFRIUkVFLkNvbG9yKSB7XG4gICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgIFwiTm90ZTogcmVwbGFjZWQgJ2NvbG9yJyB3aXRoICdnbG9iYWxDb2xvcicgcHJvcGVydHkgc2luY2UgaXRzIG1vcmUgZWZmaWNpZW50IGFuZCB5b3UgcHJvdmlkZWQgY29sb3IgdmFsdWUgd2FzIGNvbnN0YW50IGFueXdheS5cIlxuICAgICAgKTtcbiAgICAgIG9wdGlvbnMucGFydGljbGVzLmdsb2JhbENvbG9yID0gb3B0aW9ucy5wYXJ0aWNsZXMuY29sb3I7XG4gICAgICBkZWxldGUgb3B0aW9ucy5wYXJ0aWNsZXMuY29sb3I7XG4gICAgfVxuXG4gICAgLy8gc2V0IHNvbWUgaW50ZXJuYWwgZmxhZ3NcbiAgICBvcHRpb25zLnBhcnRpY2xlcy5mYWRlID0gZGVmaW5lZChwT3B0aW9ucy5zdGFydEFscGhhKSB8fCBkZWZpbmVkKHBPcHRpb25zLmFscGhhKTtcbiAgICBvcHRpb25zLnBhcnRpY2xlcy5yb3RhdGluZyA9IGRlZmluZWQocE9wdGlvbnMucm90YXRpb25TcGVlZCkgfHwgZGVmaW5lZChwT3B0aW9ucy5yb3RhdGlvbik7XG4gICAgb3B0aW9ucy5wYXJ0aWNsZXMuY29sb3JpemUgPSBkZWZpbmVkKHBPcHRpb25zLmNvbG9yKSB8fCBkZWZpbmVkKHBPcHRpb25zLnN0YXJ0Q29sb3IpO1xuICAgIG9wdGlvbnMucGFydGljbGVzLnNjYWxpbmcgPSBkZWZpbmVkKHBPcHRpb25zLnNpemUpIHx8IGRlZmluZWQocE9wdGlvbnMuc3RhcnRTaXplKTtcblxuICAgIC8vIHZhbGlkYXRlIGFscGhhIHBhcmFtc1xuICAgIGlmIChkZWZpbmVkKHBPcHRpb25zLnN0YXJ0QWxwaGEpICYmICFkZWZpbmVkKHBPcHRpb25zLmVuZEFscGhhKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBwcm92aWRpbmcgJ3N0YXJ0QWxwaGEnIHlvdSBtdXN0IGFsc28gcHJvdmlkZSAnZW5kQWxwaGEnIVwiKTtcbiAgICB9XG4gICAgaWYgKGRlZmluZWQocE9wdGlvbnMuc3RhcnRBbHBoYSkgJiYgZGVmaW5lZChwT3B0aW9ucy5hbHBoYSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldoZW4gcHJvdmlkaW5nICdhbHBoYScgeW91IGNhbid0IGFsc28gcHJvdmlkZSAnc3RhcnRBbHBoYSchXCIpO1xuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIGNvbG9yIHBhcmFtc1xuICAgIGlmIChkZWZpbmVkKHBPcHRpb25zLnN0YXJ0Q29sb3IpICYmICFkZWZpbmVkKHBPcHRpb25zLmVuZENvbG9yKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBwcm92aWRpbmcgJ3N0YXJ0Q29sb3InIHlvdSBtdXN0IGFsc28gcHJvdmlkZSAnZW5kQ29sb3InIVwiKTtcbiAgICB9XG4gICAgaWYgKGRlZmluZWQocE9wdGlvbnMuc3RhcnRDb2xvcikgJiYgZGVmaW5lZChwT3B0aW9ucy5jb2xvcikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIldoZW4gcHJvdmlkaW5nICdjb2xvcicgeW91IGNhbid0IGFsc28gcHJvdmlkZSAnc3RhcnRDb2xvcichXCIpO1xuICAgIH1cblxuICAgIC8vIHZhbGlkYXRlIHNpemUgcGFyYW1zXG4gICAgaWYgKGRlZmluZWQocE9wdGlvbnMuc3RhcnRTaXplKSAmJiAhZGVmaW5lZChwT3B0aW9ucy5lbmRTaXplKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBwcm92aWRpbmcgJ3N0YXJ0U2l6ZScgeW91IG11c3QgYWxzbyBwcm92aWRlICdlbmRTaXplJyFcIik7XG4gICAgfVxuICAgIGlmIChkZWZpbmVkKHBPcHRpb25zLnN0YXJ0U2l6ZSkgJiYgZGVmaW5lZChwT3B0aW9ucy5zaXplKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiV2hlbiBwcm92aWRpbmcgJ3NpemUnIHlvdSBjYW4ndCBhbHNvIHByb3ZpZGUgJ3N0YXJ0U2l6ZSchXCIpO1xuICAgIH1cblxuICAgIC8vIGdldCBwYXJ0aWNsZXMgY291bnRcbiAgICBjb25zdCBwYXJ0aWNsZUNvdW50ID0gb3B0aW9ucy5zeXN0ZW0ucGFydGljbGVzQ291bnQgfHwgMTA7XG5cbiAgICAvLyBnZXQgYmxlbmRpbmcgbW9kZVxuICAgIGNvbnN0IGJsZW5kaW5nID0gb3B0aW9ucy5wYXJ0aWNsZXMuYmxlbmRpbmcgfHwgXCJvcGFxdWVcIjtcblxuICAgIC8vIGdldCB0aHJlZWpzIGJsZW5kaW5nIG1vZGVcbiAgICBjb25zdCB0aHJlZUJsZW5kID0gQkxFTkRJTkdfT1BUSU9OU1tibGVuZGluZ107XG5cbiAgICAvLyBzZXQgZW1pdHRlcnNcbiAgICB0aGlzLl9lbWl0dGVycyA9IFtdO1xuICAgIGlmIChvcHRpb25zLnN5c3RlbS5lbWl0dGVycykge1xuICAgICAgaWYgKG9wdGlvbnMuc3lzdGVtLmVtaXR0ZXJzIGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcHRpb25zLnN5c3RlbS5lbWl0dGVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIHRoaXMuYWRkRW1pdHRlcihvcHRpb25zLnN5c3RlbS5lbWl0dGVyc1tpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuYWRkRW1pdHRlcihvcHRpb25zLnN5c3RlbS5lbWl0dGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaGFzIHRyYW5zcGFyZW5jeT9cbiAgICBjb25zdCBpc1RyYW5zcGFyZW50ID0gYmxlbmRpbmcgIT09IFwib3BhcXVlXCI7XG5cbiAgICAvLyBjcmVhdGUgdGhlIHBhcnRpY2xlIGdlb21ldHJ5XG4gICAgdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeSA9IG5ldyBUSFJFRS5CdWZmZXJHZW9tZXRyeSgpO1xuXG4gICAgLy8gc2V0IHBlcnNwZWN0aXZlIG1vZGVcbiAgICBjb25zdCBwZXJzcGVjdGl2ZSA9XG4gICAgICBvcHRpb25zLnN5c3RlbS5wZXJzcGVjdGl2ZSAhPT0gdW5kZWZpbmVkID8gQm9vbGVhbihvcHRpb25zLnN5c3RlbS5wZXJzcGVjdGl2ZSkgOiB0cnVlO1xuXG4gICAgLy8gY3JlYXRlIHBhcnRpY2xlcyBtYXRlcmlhbFxuICAgIGNvbnN0IHBNYXRlcmlhbCA9IG5ldyBQYXJ0aWNsZXNNYXRlcmlhbCh7XG4gICAgICBzaXplOiBvcHRpb25zLnBhcnRpY2xlcy5zaXplIHx8IDEwLFxuICAgICAgY29sb3I6IG9wdGlvbnMucGFydGljbGVzLmdsb2JhbENvbG9yIHx8IDB4ZmZmZmZmLFxuICAgICAgYmxlbmRpbmc6IHRocmVlQmxlbmQsXG4gICAgICBwZXJzcGVjdGl2ZTogcGVyc3BlY3RpdmUsXG4gICAgICB0cmFuc3BhcmVudDogaXNUcmFuc3BhcmVudCxcbiAgICAgIG1hcDogb3B0aW9ucy5wYXJ0aWNsZXMudGV4dHVyZSxcbiAgICAgIHBlclBhcnRpY2xlQ29sb3I6IEJvb2xlYW4ob3B0aW9ucy5wYXJ0aWNsZXMuY29sb3JpemUpLFxuICAgICAgYWxwaGFUZXN0OiBibGVuZGluZyA9PT0gXCJibGVuZFwiICYmIGRlZmluZWQob3B0aW9ucy5wYXJ0aWNsZXMudGV4dHVyZSksXG4gICAgICBjb25zdFNpemU6IGRlZmluZWQob3B0aW9ucy5wYXJ0aWNsZXMuZ2xvYmFsU2l6ZSkgPyBvcHRpb25zLnBhcnRpY2xlcy5nbG9iYWxTaXplIDogbnVsbCxcbiAgICAgIGRlcHRoV3JpdGU6IGRlZmluZWQob3B0aW9ucy5zeXN0ZW0uZGVwdGhXcml0ZSkgPyBvcHRpb25zLnN5c3RlbS5kZXB0aFdyaXRlIDogdHJ1ZSxcbiAgICAgIGRlcHRoVGVzdDogZGVmaW5lZChvcHRpb25zLnN5c3RlbS5kZXB0aFRlc3QpID8gb3B0aW9ucy5zeXN0ZW0uZGVwdGhUZXN0IDogdHJ1ZSxcbiAgICAgIHBlclBhcnRpY2xlUm90YXRpb246IG9wdGlvbnMucGFydGljbGVzLnJvdGF0aW5nXG4gICAgfSk7XG5cbiAgICAvLyBzdG9yZSBtYXRlcmlhbCBmb3IgbGF0ZXIgdXNhZ2VcbiAgICB0aGlzLm1hdGVyaWFsID0gcE1hdGVyaWFsO1xuXG4gICAgLy8gc3RvcmUgc3BlZWQgZmFjdG9yXG4gICAgdGhpcy5zcGVlZCA9IG9wdGlvbnMuc3lzdGVtLnNwZWVkIHx8IDE7XG5cbiAgICAvLyBzZXQgc3lzdGVtIHN0YXJ0aW5nIHR0bCBhbmQgb3RoZXIgcGFyYW1zXG4gICAgdGhpcy5yZXNldCgpO1xuXG4gICAgLy8gZGVhZCBwYXJ0aWNsZXMgYW5kIGFsaXZlIHBhcnRpY2xlcyBsaXN0c1xuICAgIHRoaXMuX2FsaXZlUGFydGljbGVzID0gW107XG4gICAgdGhpcy5fZGVhZFBhcnRpY2xlcyA9IFtdO1xuXG4gICAgLy8gY3JlYXRlIGFsbCBwYXJ0aWNsZXMgKyBzZXQgZ2VvbWV0cnkgYXR0cmlidXRlc1xuICAgIGNvbnN0IHZlcnRpY2VzID0gbmV3IEZsb2F0MzJBcnJheShwYXJ0aWNsZUNvdW50ICogMyk7XG4gICAgY29uc3QgY29sb3JzID0gb3B0aW9ucy5wYXJ0aWNsZXMuY29sb3JpemUgPyBuZXcgRmxvYXQzMkFycmF5KHBhcnRpY2xlQ291bnQgKiAzKSA6IG51bGw7XG4gICAgY29uc3QgYWxwaGFzID0gb3B0aW9ucy5wYXJ0aWNsZXMuZmFkZSA/IG5ldyBGbG9hdDMyQXJyYXkocGFydGljbGVDb3VudCAqIDEpIDogbnVsbDtcbiAgICBjb25zdCBzaXplcyA9IG9wdGlvbnMucGFydGljbGVzLnNjYWxpbmcgPyBuZXcgRmxvYXQzMkFycmF5KHBhcnRpY2xlQ291bnQgKiAxKSA6IG51bGw7XG4gICAgY29uc3Qgcm90YXRpb25zID0gb3B0aW9ucy5wYXJ0aWNsZXMucm90YXRpbmcgPyBuZXcgRmxvYXQzMkFycmF5KHBhcnRpY2xlQ291bnQgKiAxKSA6IG51bGw7XG5cbiAgICBmb3IgKGxldCBwID0gMDsgcCA8IHBhcnRpY2xlQ291bnQ7IHArKykge1xuICAgICAgY29uc3QgaW5kZXggPSBwICogMztcbiAgICAgIHZlcnRpY2VzW2luZGV4XSA9IHZlcnRpY2VzW2luZGV4ICsgMV0gPSB2ZXJ0aWNlc1tpbmRleCArIDJdID0gMDtcblxuICAgICAgaWYgKGNvbG9ycykgY29sb3JzW2luZGV4XSA9IGNvbG9yc1tpbmRleCArIDFdID0gY29sb3JzW2luZGV4ICsgMl0gPSAxO1xuICAgICAgaWYgKGFscGhhcykgYWxwaGFzW3BdID0gMTtcbiAgICAgIGlmIChzaXplcykgc2l6ZXNbcF0gPSAxO1xuICAgICAgaWYgKHJvdGF0aW9ucykgcm90YXRpb25zW3BdID0gMDtcblxuICAgICAgdGhpcy5fZGVhZFBhcnRpY2xlcy5wdXNoKG5ldyBQYXJ0aWNsZSh0aGlzKSk7XG4gICAgfVxuXG4gICAgdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJwb3NpdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHZlcnRpY2VzLCAzKSk7XG4gICAgaWYgKGFscGhhcykge1xuICAgICAgdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJhbHBoYVwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKGFscGhhcywgMSkpO1xuICAgIH1cbiAgICBpZiAoY29sb3JzKSB7XG4gICAgICB0aGlzLnBhcnRpY2xlc0dlb21ldHJ5LnNldEF0dHJpYnV0ZShcImNvbG9yXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoY29sb3JzLCAzKSk7XG4gICAgfVxuICAgIGlmIChzaXplcykge1xuICAgICAgdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJzaXplXCIsIG5ldyBUSFJFRS5CdWZmZXJBdHRyaWJ1dGUoc2l6ZXMsIDEpKTtcbiAgICB9XG4gICAgaWYgKHJvdGF0aW9ucykge1xuICAgICAgdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoXCJyb3RhdGlvblwiLCBuZXcgVEhSRUUuQnVmZmVyQXR0cmlidXRlKHJvdGF0aW9ucywgMSkpO1xuICAgIH1cbiAgICB0aGlzLnBhcnRpY2xlc0dlb21ldHJ5LnNldERyYXdSYW5nZSgwLCAwKTtcblxuICAgIC8vIHNldCBzY2FsZVxuICAgIHRoaXMubWF0ZXJpYWwuc2V0QmFzZVNjYWxlKG9wdGlvbnMuc3lzdGVtLnNjYWxlIHx8IDQwMCk7XG5cbiAgICAvLyBjcmVhdGUgdGhlIHBhcnRpY2xlcyBzeXN0ZW1cbiAgICBjb25zdCBwYXJ0aWNsZVN5c3RlbSA9IG5ldyBUSFJFRS5Qb2ludHModGhpcy5wYXJ0aWNsZXNHZW9tZXRyeSwgdGhpcy5tYXRlcmlhbC5tYXRlcmlhbCk7XG4gICAgcGFydGljbGVTeXN0ZW0uc29ydFBhcnRpY2xlcyA9IGlzVHJhbnNwYXJlbnQ7XG5cbiAgICAvLyBzZXQgZGVmYXVsdCByZW5kZXIgb3JkZXJcbiAgICBpZiAoUGFydGljbGVzU3lzdGVtLmRlZmF1bHRSZW5kZXJPcmRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBwYXJ0aWNsZVN5c3RlbS5yZW5kZXJPcmRlciA9IFBhcnRpY2xlc1N5c3RlbS5kZWZhdWx0UmVuZGVyT3JkZXI7XG4gICAgfVxuXG4gICAgLy8gc3RvcmUgcGFydGljbGVzIHN5c3RlbVxuICAgIHRoaXMucGFydGljbGVTeXN0ZW0gPSBwYXJ0aWNsZVN5c3RlbTtcblxuICAgIC8vIHRvIG1ha2Ugc3VyZSBmaXJzdCB1cGRhdGUgd2lsbCB1cGRhdGUgZXZlcnl0aGluZ1xuICAgIHRoaXMuX3Bvc2l0aW9uRGlydHkgPSB0cnVlO1xuICAgIHRoaXMuX2NvbG9yc0RpcnR5ID0gQm9vbGVhbihjb2xvcnMpO1xuICAgIHRoaXMuX2FscGhhRGlydHkgPSBCb29sZWFuKGFscGhhcyk7XG4gICAgdGhpcy5fcm90YXRlRGlydHkgPSBCb29sZWFuKHJvdGF0aW9ucyk7XG5cbiAgICAvLyBhZGQgaXQgdG8gdGhlIHBhcmVudCBjb250YWluZXJcbiAgICBpZiAob3B0aW9ucy5jb250YWluZXIpIHtcbiAgICAgIHRoaXMuYWRkVG8ob3B0aW9ucy5jb250YWluZXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBjcmVhdGVzIGFuIGluc3RhbmNlIGZyb20gYSBqc29uIGRlZmluaXRpb25cbiAgICpcbiAgICogQHN0YXRpY1xuICAgKiBAcGFyYW0geyp9IG9wdGlvbnNcbiAgICogQHJldHVybiB7UGFydGljbGVzU3lzdGVtfSBuZXcgUGFydGljbGVzU3lzdGVtIGNyZWF0ZWQgZnJvbSB0aGUganNvbi1vYmplY3RcbiAgICogQG1lbWJlcm9mIFBhcnRpY2xlc1N5c3RlbVxuICAgKi9cbiAgc3RhdGljIGZyb21KU09OKG9wdGlvbnMsIHJlc291cmNlcyA9IHt9KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gY29weUZyb21KU09OKG9wdGlvbnMsIHJlc291cmNlcyk7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0LnN5c3RlbS5lbWl0dGVycykpIHtcbiAgICAgIHJlc3VsdC5zeXN0ZW0uZW1pdHRlcnMgPSByZXN1bHQuc3lzdGVtLmVtaXR0ZXJzLm1hcCgodikgPT4gbmV3IEVtaXR0ZXIodikpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQuc3lzdGVtLmVtaXR0ZXJzID0gbmV3IEVtaXR0ZXIocmVzdWx0LnN5c3RlbS5lbWl0dGVycyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUGFydGljbGVzU3lzdGVtKHJlc3VsdCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGVtaXR0ZXIgdG8gdGhpcyBwYXJ0aWNsZXMgc3lzdGVtLlxuICAgKi9cbiAgYWRkRW1pdHRlcihlbWl0dGVyKSB7XG4gICAgdGhpcy5fZW1pdHRlcnMucHVzaChlbWl0dGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlIHRoZSBlbnRpcmUgc3lzdGVtLlxuICAgKi9cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLnBhcnRpY2xlc0dlb21ldHJ5LmRpc3Bvc2UoKTtcbiAgICB0aGlzLm1hdGVyaWFsLmRpc3Bvc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdHJ1ZSB3aGVuIHR0bCBpcyBleHBpcmVkIGFuZCB0aGVyZSBhcmUgbm8gbW9yZSBhbGl2ZSBwYXJ0aWNsZXMgaW4gc3lzdGVtLlxuICAgKi9cbiAgZ2V0IGZpbmlzaGVkKCkge1xuICAgIHJldHVybiB0aGlzLnR0bEV4cGlyZWQgJiYgdGhpcy5wYXJ0aWNsZXNDb3VudCA9PT0gMDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgaWYgdGhpcyBzeXN0ZW0ncyB0dGwgaXMgZXhwaXJlZC5cbiAgICovXG4gIGdldCB0dGxFeHBpcmVkKCkge1xuICAgIHJldHVybiB0aGlzLnR0bCAhPT0gdW5kZWZpbmVkICYmIHRoaXMudHRsIDw9IDA7XG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgcGFydGljbGVzIHN5c3RlbSB0dGwuXG4gICAqL1xuICByZXNldCgpIHtcbiAgICB0aGlzLnR0bCA9IHRoaXMub3B0aW9ucy5zeXN0ZW0udHRsO1xuICAgIHRoaXMuYWdlID0gMDtcbiAgICB0aGlzLl90aW1lVG9VcGRhdGVCUyA9IDA7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHN5c3RlbSdzIHdvcmxkIHBvc2l0aW9uLlxuICAgKi9cbiAgZ2V0V29ybGRQb3NpdGlvbihyZXQpIHtcbiAgICByZXQgPSByZXQgfHwgbmV3IFRIUkVFLlZlY3RvcjMoKTtcbiAgICB0aGlzLnBhcnRpY2xlU3lzdGVtLmdldFdvcmxkUG9zaXRpb24ocmV0KTtcbiAgICByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCB0aGUgcGFydGljbGVzIHN5c3RlbSB0byBzY2VuZSBvciBjb250YWluZXIuXG4gICAqIEBwYXJhbSB7VEhSRUUuT2JqZWN0M0R9IGNvbnRhaW5lciBDb250YWluZXIgdG8gYWRkIHN5c3RlbSB0by5cbiAgICovXG4gIGFkZFRvKGNvbnRhaW5lcikge1xuICAgIGNvbnRhaW5lci5hZGQodGhpcy5wYXJ0aWNsZVN5c3RlbSk7XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEgcGFydGljbGUncyBjb2xvciB2YWx1ZS5cbiAgICovXG4gIHNldENvbG9yKGluZGV4LCBjb2xvcikge1xuICAgIGluZGV4ICo9IDM7XG4gICAgY29uc3QgY29sb3JzID0gdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5hdHRyaWJ1dGVzLmNvbG9yLmFycmF5O1xuICAgIGNvbG9yc1tpbmRleF0gPSBjb2xvci5yO1xuICAgIGNvbG9yc1tpbmRleCArIDFdID0gY29sb3IuZztcbiAgICBjb2xvcnNbaW5kZXggKyAyXSA9IGNvbG9yLmI7XG4gICAgdGhpcy5fY29sb3JzRGlydHkgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIHBhcnRpY2xlJ3MgcG9zaXRpb24uXG4gICAqL1xuICBzZXRQb3NpdGlvbihpbmRleCwgcG9zaXRpb24pIHtcbiAgICBpbmRleCAqPSAzO1xuICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5hdHRyaWJ1dGVzLnBvc2l0aW9uLmFycmF5O1xuICAgIHZlcnRpY2VzW2luZGV4XSA9IHBvc2l0aW9uLng7XG4gICAgdmVydGljZXNbaW5kZXggKyAxXSA9IHBvc2l0aW9uLnk7XG4gICAgdmVydGljZXNbaW5kZXggKyAyXSA9IHBvc2l0aW9uLno7XG4gICAgdGhpcy5fcG9zaXRpb25EaXJ0eSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHBhcnRpY2xlJ3MgYWxwaGEuXG4gICAqL1xuICBzZXRBbHBoYShpbmRleCwgdmFsdWUpIHtcbiAgICB0aGlzLnBhcnRpY2xlc0dlb21ldHJ5LmF0dHJpYnV0ZXMuYWxwaGEuYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgdGhpcy5fYWxwaGFEaXJ0eSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHBhcnRpY2xlJ3Mgcm90YXRpb24uXG4gICAqL1xuICBzZXRSb3RhdGlvbihpbmRleCwgdmFsdWUpIHtcbiAgICB0aGlzLnBhcnRpY2xlc0dlb21ldHJ5LmF0dHJpYnV0ZXMucm90YXRpb24uYXJyYXlbaW5kZXhdID0gdmFsdWU7XG4gICAgdGhpcy5fcm90YXRlRGlydHkgPSB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBwYXJ0aWNsZSdzIHNpemUuXG4gICAqL1xuICBzZXRTaXplKGluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMucGFydGljbGVzR2VvbWV0cnkuYXR0cmlidXRlcy5zaXplLmFycmF5W2luZGV4XSA9IHZhbHVlO1xuICAgIHRoaXMuX3NpemVEaXJ0eSA9IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGhvdyBtYW55IHBhcnRpY2xlcyB0aGlzIHN5c3RlbSBjdXJyZW50bHkgc2hvd3MuXG4gICAqL1xuICBnZXQgcGFydGljbGVzQ291bnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2FsaXZlUGFydGljbGVzLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgbWF4IHBhcnRpY2xlcyBjb3VudC5cbiAgICovXG4gIGdldCBtYXhQYXJ0aWNsZXNDb3VudCgpIHtcbiAgICByZXR1cm4gdGhpcy5fYWxpdmVQYXJ0aWNsZXMubGVuZ3RoICsgdGhpcy5fZGVhZFBhcnRpY2xlcy5sZW5ndGg7XG4gIH1cblxuICAvKipcbiAgICogSWYgdHRsIGlzIGV4cGlyZWQgYW5kIHRoZXJlIGFyZSBubyBtb3JlIGFsaXZlIHBhcnRpY2xlcywgcmVtb3ZlIHN5c3RlbSBhbmQgZGlzcG9zZSBpdC5cbiAgICogQHJldHVybnMgVHJ1ZSBpZiByZW1vdmVkICYgZGlzcG9zZWQsIGZhbHNlIGlmIHN0aWxsIGFsaXZlLlxuICAgKi9cbiAgcmVtb3ZlQW5kRGlzcG9zZUlmRmluaXNoZWQoKSB7XG4gICAgaWYgKHRoaXMuZmluaXNoZWQpIHtcbiAgICAgIHRoaXMucmVtb3ZlU2VsZigpO1xuICAgICAgdGhpcy5kaXNwb3NlKCk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgYmluZE9iamVjdChvYmplY3QsIGxvY2tCb3VuZFJvdGF0aW9uKSB7XG4gICAgdGhpcy5ib3VuZE9iamVjdCA9IG9iamVjdDtcbiAgICB0aGlzLmxvY2tCb3VuZFJvdGF0aW9uID0gZGVmaW5lZChsb2NrQm91bmRSb3RhdGlvbikgPyBsb2NrQm91bmRSb3RhdGlvbiA6IHRydWU7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHBhcnRpY2xlcyBzeXN0ZW0uXG4gICAqL1xuICB1cGRhdGUoZGVsdGFUaW1lKSB7XG4gICAgLy8gaWYgZGVsdGFUaW1lIGlzIHVuZGVmaW5lZCwgc2V0IGF1dG9tYXRpY2FsbHlcbiAgICBpZiAoZGVsdGFUaW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IHRpbWVOb3cgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAvIDEwMDAuMDtcbiAgICAgIGRlbHRhVGltZSA9IHRpbWVOb3cgLSB0aGlzLl9sYXN0VGltZSB8fCAwO1xuICAgICAgdGhpcy5fbGFzdFRpbWUgPSB0aW1lTm93O1xuICAgIH1cblxuICAgIC8vIGRlbHRhIHRpbWUgaXMgMD8gc2tpcFxuICAgIGlmIChkZWx0YVRpbWUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgdHRsXG4gICAgaWYgKHRoaXMudHRsICE9PSB1bmRlZmluZWQgJiYgdGhpcy50dGwgPiAwKSB7XG4gICAgICB0aGlzLnR0bCAtPSBkZWx0YVRpbWU7XG4gICAgfVxuXG4gICAgLy8gYXBwbHkgc3BlZWRcbiAgICBkZWx0YVRpbWUgKj0gdGhpcy5zcGVlZDtcblxuICAgIC8vIHN0b3JlIGxhc3QgZGVsdGEgdGltZVxuICAgIHRoaXMuZHQgPSBkZWx0YVRpbWU7XG4gICAgdGhpcy5hZ2UgKz0gZGVsdGFUaW1lO1xuXG4gICAgLy8gaWYgd2Ugc2hhbGwgZm9sbG93IGFuIG9iamVjdCxcbiAgICAvLyB3ZSBqdXN0IHVwZGF0ZSB0aGUgcG9zaXRpb24gb24gZWFjaCBmcmFtZSxcbiAgICAvLyB0byBiZSB0aGUgc2FtZSwgYXMgdGhlIG9iamVjdFxuICAgIGlmICh0aGlzLmJvdW5kT2JqZWN0KSB7XG4gICAgICBjb25zdCBwb3MgPSB0aGlzLmJvdW5kT2JqZWN0LnBvc2l0aW9uO1xuICAgICAgdGhpcy5wYXJ0aWNsZVN5c3RlbS5wb3NpdGlvbi5zZXQocG9zLngsIHBvcy55LCBwb3Mueik7XG4gICAgICBpZiAoIXRoaXMubG9ja0JvdW5kUm90YXRpb24pIHtcbiAgICAgICAgY29uc3Qgcm90ID0gdGhpcy5ib3VuZE9iamVjdC5yb3RhdGlvbjtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZVN5c3RlbS5yb3RhdGlvbi5zZXQocm90LngsIHJvdC55LCByb3Queik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdG8gY2hlY2sgaWYgbnVtYmVyIG9mIHBhcnRpY2xlcyBjaGFuZ2VkXG4gICAgY29uc3QgcHJldlBhcnRpY2xlc0NvdW50ID0gdGhpcy5fYWxpdmVQYXJ0aWNsZXMubGVuZ3RoO1xuXG4gICAgLy8gZ2VuZXJhdGUgcGFydGljbGVzICh1bmxlc3MgdHRsIGV4cGlyZWQpXG4gICAgaWYgKCF0aGlzLnR0bEV4cGlyZWQpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5fZW1pdHRlcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgY29uc3QgdG9TcGF3biA9IHRoaXMuX2VtaXR0ZXJzW2ldLnVwZGF0ZShkZWx0YVRpbWUsIHRoaXMpO1xuICAgICAgICBpZiAodG9TcGF3bikge1xuICAgICAgICAgIHRoaXMuc3Bhd25QYXJ0aWNsZXModG9TcGF3bik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyB1cGRhdGUgcGFydGljbGVzXG4gICAgZm9yIChsZXQgaSA9IHRoaXMuX2FsaXZlUGFydGljbGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAvLyB1cGRhdGUgcGFydGljbGVcbiAgICAgIGNvbnN0IHBhcnRpY2xlID0gdGhpcy5fYWxpdmVQYXJ0aWNsZXNbaV07XG4gICAgICBwYXJ0aWNsZS51cGRhdGUoaSwgZGVsdGFUaW1lKTtcblxuICAgICAgLy8gZmluaXNoZWQ/IHJlbW92ZSBpdFxuICAgICAgaWYgKHBhcnRpY2xlLmZpbmlzaGVkKSB7XG4gICAgICAgIHRoaXMuX2FsaXZlUGFydGljbGVzLnNwbGljZShpLCAxKTtcbiAgICAgICAgdGhpcy5fZGVhZFBhcnRpY2xlcy5wdXNoKHBhcnRpY2xlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBoaWRlIGludmlzaWJsZSB2ZXJ0aWNlc1xuICAgIGlmIChwcmV2UGFydGljbGVzQ291bnQgIT09IHRoaXMuX2FsaXZlUGFydGljbGVzLmxlbmd0aCkge1xuICAgICAgdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5zZXREcmF3UmFuZ2UoMCwgdGhpcy5fYWxpdmVQYXJ0aWNsZXMubGVuZ3RoKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgdmVydGljZXMgZGlydHkgZmxhZ1xuICAgIHRoaXMucGFydGljbGVzR2VvbWV0cnkuYXR0cmlidXRlcy5wb3NpdGlvbi5uZWVkc1VwZGF0ZSA9IHRoaXMuX3Bvc2l0aW9uRGlydHk7XG4gICAgdGhpcy5fbmVlZEJvdW5kaW5nU3BoZXJlVXBkYXRlID0gdGhpcy5fbmVlZEJvdW5kaW5nU3BoZXJlVXBkYXRlIHx8IHRoaXMuX3Bvc2l0aW9uRGlydHk7XG4gICAgdGhpcy5fcG9zaXRpb25EaXJ0eSA9IGZhbHNlO1xuXG4gICAgLy8gc2V0IGNvbG9ycyBkaXJ0eSBmbGFnXG4gICAgaWYgKHRoaXMuX2NvbG9yc0RpcnR5KSB7XG4gICAgICB0aGlzLnBhcnRpY2xlc0dlb21ldHJ5LmF0dHJpYnV0ZXMuY29sb3IubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5fY29sb3JzRGlydHkgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBzZXQgYWxwaGFzIGRpcnR5IGZsYWdcbiAgICBpZiAodGhpcy5fYWxwaGFEaXJ0eSkge1xuICAgICAgdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5hdHRyaWJ1dGVzLmFscGhhLm5lZWRzVXBkYXRlID0gdHJ1ZTtcbiAgICAgIHRoaXMuX2FscGhhRGlydHkgPSBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBzZXQgc2l6ZSBkaXJ0eSBmbGFnXG4gICAgaWYgKHRoaXMuX3NpemVEaXJ0eSkge1xuICAgICAgdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5hdHRyaWJ1dGVzLnNpemUubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgdGhpcy5fc2l6ZURpcnR5ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gc2V0IHJvdGF0aW9uIGRpcnR5IGZsYWdcbiAgICBpZiAodGhpcy5fcm90YXRlRGlydHkpIHtcbiAgICAgIHRoaXMucGFydGljbGVzR2VvbWV0cnkuYXR0cmlidXRlcy5yb3RhdGlvbi5uZWVkc1VwZGF0ZSA9IHRydWU7XG4gICAgICB0aGlzLl9yb3RhdGVEaXJ0eSA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBib3VuZGluZyBzcGhlcmVcbiAgICBpZiAodGhpcy5fbmVlZEJvdW5kaW5nU3BoZXJlVXBkYXRlKSB7XG4gICAgICB0aGlzLl90aW1lVG9VcGRhdGVCUyAtPSBkZWx0YVRpbWU7XG4gICAgICBpZiAodGhpcy5fdGltZVRvVXBkYXRlQlMgPD0gMCkge1xuICAgICAgICB0aGlzLl90aW1lVG9VcGRhdGVCUyA9IDAuMjtcbiAgICAgICAgdGhpcy5wYXJ0aWNsZXNHZW9tZXRyeS5jb21wdXRlQm91bmRpbmdTcGhlcmUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpZiBmaW5pc2hlZCwgc3RvcCBoZXJlXG4gICAgaWYgKHRoaXMuZmluaXNoZWQpIHtcbiAgICAgIC8vIFRPRE86IHJlbW92ZSBvcHRpb25zIGZpbmlzaFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zeXN0ZW0ub25GaW5pc2gpIHRoaXMub3B0aW9ucy5zeXN0ZW0ub25GaW5pc2godGhpcyk7XG4gICAgICBpZiAodGhpcy5vbkZpbmlzaCkgdGhpcy5vbkZpbmlzaCh0aGlzKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBjYWxsIG9wdGlvbmFsIHVwZGF0ZVxuICAgIC8vIFRPRE86IHJlbW92ZSBvcHRpb25zIG9uVXBkYXRlXG4gICAgaWYgKHRoaXMub3B0aW9ucy5zeXN0ZW0ub25VcGRhdGUpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5zeXN0ZW0ub25VcGRhdGUodGhpcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLm9uVXBkYXRlKSB0aGlzLm9uVXBkYXRlKHRoaXMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwYXduIHBhcnRpY2xlcy5cbiAgICogQHBhcmFtIHtOdW1iZXJ9IHF1YW50aXR5IE51bWJlciBvZiBwYXJ0aWNsZXMgdG8gc3Bhd24uIElmIGV4Y2VlZCBtYXggYXZhaWxhYmxlIHBhcnRpY2xlcyBpbiBzeXN0ZW0sIHNraXAuXG4gICAqL1xuICBzcGF3blBhcnRpY2xlcyhxdWFudGl0eSkge1xuICAgIC8vIHNwYXduIHBhcnRpY2xlc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcXVhbnRpdHk7ICsraSkge1xuICAgICAgLy8gbm8gYXZhaWxhYmxlIGRlYWQgcGFydGljbGVzPyBza2lwXG4gICAgICBpZiAodGhpcy5fZGVhZFBhcnRpY2xlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBzcGF3biBwYXJ0aWNsZVxuICAgICAgY29uc3QgcGFydGljbGUgPSB0aGlzLl9kZWFkUGFydGljbGVzLnBvcCgpO1xuICAgICAgcGFydGljbGUucmVzZXQoKTtcbiAgICAgIHRoaXMuX2FsaXZlUGFydGljbGVzLnB1c2gocGFydGljbGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgcGFydGljbGVzIHN5c3RlbSBmcm9tIGl0cyBwYXJlbnQuXG4gICAqL1xuICByZW1vdmVTZWxmKCkge1xuICAgIGlmICh0aGlzLnBhcnRpY2xlU3lzdGVtLnBhcmVudCkge1xuICAgICAgdGhpcy5wYXJ0aWNsZVN5c3RlbS5wYXJlbnQucmVtb3ZlKHRoaXMucGFydGljbGVTeXN0ZW0pO1xuICAgIH1cbiAgfVxufVxuXG4vLyBvdmVycmlkZSB0aGlzIHRvIHNldCBkZWZhdWx0IHJlbmRlcmluZyBvcmRlciB0byBhbGwgcGFydGljbGUgc3lzdGVtc1xuUGFydGljbGVzU3lzdGVtLmRlZmF1bHRSZW5kZXJPcmRlciA9IHVuZGVmaW5lZDtcblxuLy8gZXhwb3J0IHRoZSBwYXJ0aWNsZXMgc3lzdGVtXG5tb2R1bGUuZXhwb3J0cyA9IFBhcnRpY2xlc1N5c3RlbTtcbiIsIi8qKlxuICogTW9kdWxlIG1haW4gZW50cnkgcG9pbnQuXG4gKiBBdXRob3I6IFJvbmVuIE5lc3MuXG4gKiBTaW5jZTogMjAxOS5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgUGFydGljbGVzU3lzdGVtOiByZXF1aXJlKCcuL3BhcnRpY2xlc19zeXN0ZW0nKSxcbiAgICBQYXJ0aWNsZTogcmVxdWlyZSgnLi9wYXJ0aWNsZScpLFxuICAgIEVtaXR0ZXI6IHJlcXVpcmUoJy4vZW1pdHRlcicpLFxuICAgIFV0aWxzOiByZXF1aXJlKCcuL3V0aWxzJyksXG4gICAgUmFuZG9taXplcnM6IHJlcXVpcmUoJy4vcmFuZG9taXplcnMnKSxcbn0iXSwibmFtZXMiOlsiZ2V0UmFuZG9tQmV0d2VlbiIsIm1pbiIsIm1heCIsIk1hdGgiLCJyYW5kb20iLCJnZXRSYW5kb21XaXRoU3ByZWFkIiwiYmFzZVZhbCIsImV4dHJhUmFuZG9tIiwiZ2V0UmFuZG9tQ29sb3JCZXR3ZWVuIiwiY29sTWluIiwiY29sTWF4IiwidGFyZ2V0IiwiVEhSRUUiLCJDb2xvciIsImNvcHkiLCJzZXRSR0IiLCJyIiwiZyIsImIiLCJnZXRSYW5kb21WZWN0b3JCZXR3ZWVuIiwidmVjTWluIiwidmVjTWF4IiwiVmVjdG9yMyIsInNldCIsIngiLCJ5IiwieiIsImxlcnBDb2xvcnMiLCJjb2xBIiwiY29sQiIsImFscGhhIiwibGVycCIsInJhbmRvbWl6ZXJPclZhbHVlIiwidmFsIiwiZ2VuZXJhdGUiLCJUTVAxIiwiVE1QMiIsIlRNUF9DT0xPUiIsIlBhcnRpY2xlIiwic3lzdGVtIiwicmVzZXQiLCJvcHRpb25zIiwicGFydGljbGVzIiwiYWdlIiwiZmluaXNoZWQiLCJncmF2aXR5WCIsImdyYXZpdHlZIiwiZ3Jhdml0eSIsImdyYXZpdHlaIiwidmVsb2NpdHkiLCJnZXRDb25zdE9yUmFuZG9tVmVjdG9yIiwidmVsb2NpdHlCb251cyIsImFkZCIsImFjY2VsZXJhdGlvbiIsInBvc2l0aW9uIiwib2Zmc2V0IiwidHRsIiwiVXRpbHMiLCJ0dGxFeHRyYSIsInN0YXJ0QWxwaGEiLCJlbmRBbHBoYSIsInN0YXJ0QWxwaGFDaGFuZ2VBdCIsImZhZGUiLCJ1bmRlZmluZWQiLCJjb2xvcml6ZSIsIkJvb2xlYW4iLCJjb2xvciIsInN0YXJ0Q29sb3IiLCJlbmRDb2xvciIsInN0YXJ0Q29sb3JDaGFuZ2VBdCIsImdldENvbnN0T3JSYW5kb21Db2xvciIsInNpemUiLCJzdGFydFNpemUiLCJlbmRTaXplIiwic3RhcnRTaXplQ2hhbmdlQXQiLCJzY2FsaW5nIiwicm90YXRpb24iLCJyb3RhdGlvblNwZWVkIiwicm90YXRpbmciLCJzdGFydFdvcmxkUG9zaXRpb24iLCJvblVwZGF0ZSIsIm9uU3Bhd24iLCJpbmRleCIsImRlbHRhVGltZSIsImZpcnN0VXBkYXRlIiwid29ybGRQb3NpdGlvbiIsImdldFdvcmxkUG9zaXRpb24iLCJzZXRBbHBoYSIsInNldENvbG9yIiwic2V0U2l6ZSIsInNldFJvdGF0aW9uIiwicG9zaXRpb25Ub1NldCIsInN5c3RlbVBvcyIsInN1YiIsInNldFBvc2l0aW9uIiwiY29uc3RWYWxPclJhbmRvbWl6ZXIiLCJyZXR1cm5OdWxsSWZVbmRlZmluZWQiLCJjb2RlIiwiUGFydGljbGVzTWF0ZXJpYWwiLCJ1bmlmb3JtcyIsImdsb2JhbENvbG9yIiwidmFsdWUiLCJyZW5kZXJlclNjYWxlIiwiZmxhZ3MiLCJwZXJzcGVjdGl2ZSIsIm1hcCIsIl90ZXh0dXJlIiwicGVyUGFydGljbGVDb2xvciIsInBlclBhcnRpY2xlUm90YXRpb24iLCJjb25zdFNpemUiLCJhbHBoYVRlc3QiLCJzaGFkZXJNYXRlcmlhbCIsIlNoYWRlck1hdGVyaWFsIiwidmVydGV4U2hhZGVyIiwiVmVydGV4U2hhZGVyQ29kZSIsImZyYWdtZW50U2hhZGVyIiwiRnJhZ21lbnRTaGFkZXJDb2RlIiwidHJhbnNwYXJlbnQiLCJibGVuZGluZyIsInZlcnRleENvbG9ycyIsIlZlcnRleENvbG9ycyIsImRlcHRoV3JpdGUiLCJkZXB0aFRlc3QiLCJtYXRlcmlhbCIsImRpc3Bvc2UiLCJSYW5kb21pemVyIiwiRXJyb3IiLCJCb3hSYW5kb21pemVyIiwiTUlOX1ZFQyIsIk1BWF9WRUMiLCJyYW5kTWludXNUb09uZSIsIlNwaGVyZVJhbmRvbWl6ZXIiLCJtYXhSYWRpdXMiLCJtaW5SYWRpdXMiLCJzY2FsZXIiLCJtaW5WZWN0b3IiLCJtYXhWZWN0b3IiLCJjbGFtcCIsIm5vcm1hbGl6ZSIsIm11bHRpcGx5U2NhbGFyIiwibXVsdGlwbHkiLCJDb2xvcnNSYW5kb21pemVyIiwiTWluTWF4UmFuZG9taXplciIsInJlcXVpcmUkJDAiLCJyZXF1aXJlJCQxIiwicmVxdWlyZSQkMiIsInJlcXVpcmUkJDMiLCJyZXF1aXJlJCQ0IiwiRW1pdHRlciIsImludGVydmFsIiwidGltZVRvU3Bhd24iLCJyZXQiLCJvblNwYXduQnVyc3QiLCJvbkludGVydmFsIiwiZGV0b3JldGluZ01pblR0bCIsImRldG9yYXRlRmFjdG9yIiwiTlVMTF9BUlJBWSIsIkJMRU5ESU5HX09QVElPTlMiLCJvcGFxdWUiLCJOb0JsZW5kaW5nIiwiYWRkaXRpdmUiLCJBZGRpdGl2ZUJsZW5kaW5nIiwiTXVsdGlwbHlCbGVuZGluZyIsImJsZW5kIiwiTm9ybWFsQmxlbmRpbmciLCJkZWZpbmVkIiwiY29weUZyb21KU09OIiwib2JqZWN0IiwicmVzb3VyY2VzIiwiQXJyYXkiLCJpc0FycmF5IiwicmVzdWx0IiwiaSIsImxlbmd0aCIsInB1c2giLCJtb2R1bGVUeXBlIiwia2V5IiwicGFyYW1zIiwiQyIsIlJhbmRvbWl6ZXJzIiwiUGFydGljbGVzU3lzdGVtIiwiYm91bmRPYmplY3QiLCJsb2NrQm91bmRSb3RhdGlvbiIsInBPcHRpb25zIiwiY29uc29sZSIsIndhcm4iLCJnbG9iYWxTaXplIiwicGFydGljbGVDb3VudCIsInBhcnRpY2xlc0NvdW50IiwidGhyZWVCbGVuZCIsIl9lbWl0dGVycyIsImVtaXR0ZXJzIiwiYWRkRW1pdHRlciIsImlzVHJhbnNwYXJlbnQiLCJwYXJ0aWNsZXNHZW9tZXRyeSIsIkJ1ZmZlckdlb21ldHJ5IiwicE1hdGVyaWFsIiwidGV4dHVyZSIsInNwZWVkIiwiX2FsaXZlUGFydGljbGVzIiwiX2RlYWRQYXJ0aWNsZXMiLCJ2ZXJ0aWNlcyIsIkZsb2F0MzJBcnJheSIsImNvbG9ycyIsImFscGhhcyIsInNpemVzIiwicm90YXRpb25zIiwicCIsInNldEF0dHJpYnV0ZSIsIkJ1ZmZlckF0dHJpYnV0ZSIsInNldERyYXdSYW5nZSIsInNldEJhc2VTY2FsZSIsInNjYWxlIiwicGFydGljbGVTeXN0ZW0iLCJQb2ludHMiLCJzb3J0UGFydGljbGVzIiwiZGVmYXVsdFJlbmRlck9yZGVyIiwicmVuZGVyT3JkZXIiLCJfcG9zaXRpb25EaXJ0eSIsIl9jb2xvcnNEaXJ0eSIsIl9hbHBoYURpcnR5IiwiX3JvdGF0ZURpcnR5IiwiY29udGFpbmVyIiwiYWRkVG8iLCJlbWl0dGVyIiwidHRsRXhwaXJlZCIsIl90aW1lVG9VcGRhdGVCUyIsImF0dHJpYnV0ZXMiLCJhcnJheSIsIl9zaXplRGlydHkiLCJyZW1vdmVTZWxmIiwidGltZU5vdyIsIkRhdGUiLCJnZXRUaW1lIiwiX2xhc3RUaW1lIiwiZHQiLCJwb3MiLCJyb3QiLCJwcmV2UGFydGljbGVzQ291bnQiLCJ0b1NwYXduIiwidXBkYXRlIiwic3Bhd25QYXJ0aWNsZXMiLCJwYXJ0aWNsZSIsInNwbGljZSIsIm5lZWRzVXBkYXRlIiwiX25lZWRCb3VuZGluZ1NwaGVyZVVwZGF0ZSIsImNvbXB1dGVCb3VuZGluZ1NwaGVyZSIsIm9uRmluaXNoIiwicXVhbnRpdHkiLCJwb3AiLCJwYXJlbnQiLCJyZW1vdmUiLCJ2Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7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
